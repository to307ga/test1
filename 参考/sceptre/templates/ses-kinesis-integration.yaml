AWSTemplateFormatVersion: '2010-09-09'
Description: 'SES Kinesis Integration - Separate template to avoid dependencies'

Parameters:
  ProjectName:
    Type: String
    Description: Project name for resource naming
    Default: aws-ses-migration

  Environment:
    Type: String
    Description: Environment name
    AllowedValues:
      - development
      - staging
      - production
      - prod
      - dev
    Default: development

  # Kinesis Integration Parameters
  KinesisStreamArn:
    Type: String
    Description: ARN of the Kinesis Data Stream for SES event logging
    Default: ""

  KinesisStreamName:
    Type: String
    Description: Name of the Kinesis Data Stream for SES event logging
    Default: ""

  # SNS Integration Parameters
  SNSTopicArn:
    Type: String
    Description: ARN of the SNS Topic for SES event logging

  SESConfigurationSetName:
    Type: String
    Description: Name of the existing SES Configuration Set

  EnableKinesisLogging:
    Type: String
    Description: Enable Kinesis logging for SES events
    Default: "true"
    AllowedValues: ["true", "false"]

Conditions:
  EnableKinesisLoggingCondition: !Equals [!Ref EnableKinesisLogging, 'true']

Resources:
  # IAM Role for SES to write to Kinesis Firehose
  SESKinesisFirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-${Environment}-ses-kinesis-firehose-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ses.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SESKinesisFirehosePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - firehose:PutRecord
                  - firehose:PutRecordBatch
                  - firehose:DescribeDeliveryStream
                  - firehose:ListDeliveryStreams
                  - firehose:GetDeliveryStream
                Resource:
                  - !Sub "arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/aws-ses-migration-prod-raw-logs-stream"
                  - !Sub "arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/aws-ses-migration-prod-masked-logs-stream"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-ses-kinesis-firehose-role"
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # IAM Role for SES to write to CloudWatch Logs
  SESCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-${Environment}-ses-cloudwatch-logs-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ses.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SESCloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/ses/${ProjectName}-${Environment}"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-ses-cloudwatch-logs-role"
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # EventBridge Rule for SES events
  SESEventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${ProjectName}-${Environment}-ses-events-rule"
      Description: "Rule to capture SES events and send to Kinesis"
      EventPattern:
        source: ["aws.ses"]
        detail-type: ["SES Email Event"]
      State: ENABLED
      Targets:
        - Arn: !GetAtt SESKinesisLambda.Arn
          Id: "SESKinesisTarget"
          RoleArn: !GetAtt SESEventBridgeRole.Arn

  # Lambda function to process SES events and send to Kinesis
  SESKinesisLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-${Environment}-ses-kinesis-processor"
      Runtime: python3.13
      Handler: index.lambda_handler
      Role: !GetAtt SESKinesisLambdaRole.Arn
      Timeout: 60
      Environment:
        Variables:
          KINESIS_STREAM_NAME: !Sub "aws-ses-migration-prod-unified-data-stream"
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from datetime import datetime

          kinesis = boto3.client('kinesis')

          def lambda_handler(event, context):
              try:
                  for record in event.get('Records', []):
                      # Process SES event from EventBridge
                      ses_event = record.get('detail', {})

                      # Send to Kinesis Data Stream
                      kinesis.put_record(
                          StreamName=os.environ['KINESIS_STREAM_NAME'],
                          Data=json.dumps({
                              'timestamp': datetime.utcnow().isoformat(),
                              'source': 'ses-eventbridge',
                              'event': ses_event,
                              'raw_event': record
                          }),
                          PartitionKey='ses-events'
                      )
              except Exception as e:
                  print(f"Error processing SES event: {str(e)}")
                  raise e
              return {
                  'statusCode': 200,
                  'body': json.dumps('SES events processed successfully')
              }

  # IAM Role for Lambda to write to Kinesis
  SESKinesisLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-${Environment}-ses-kinesis-lambda-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SESKinesisLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:PutRecord
                  - kinesis:PutRecords
                Resource: !Sub "arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/aws-ses-migration-prod-unified-data-stream"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-ses-kinesis-lambda-role"
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # IAM Role for EventBridge to invoke Lambda
  SESEventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-${Environment}-ses-eventbridge-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SESEventBridgePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt SESKinesisLambda.Arn
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-ses-eventbridge-role"
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # SNS Topic for SES events
  SESEventSNSTopic:
    Type: AWS::SNS::Topic
    Condition: EnableKinesisLoggingCondition
    Properties:
      TopicName: !Sub "${ProjectName}-${Environment}-ses-events"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-ses-events-topic"
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-ses-kinesis-role"
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Event Destination for Raw Logs Firehose
  RawLogsEventDestination:
    Type: AWS::SES::ConfigurationSetEventDestination
    Condition: EnableKinesisLoggingCondition
    Properties:
      ConfigurationSetName: !Ref SESConfigurationSetName
      EventDestination:
        Name: !Sub "${ProjectName}-${Environment}-raw-logs-event-destination"
        Enabled: !Ref EnableKinesisLogging
        MatchingEventTypes:
          - bounce
          - complaint
          - delivery
          - send
          - reject
          - open
          - click
        KinesisFirehoseDestination:
          DeliveryStreamARN: !Sub "arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/aws-ses-migration-prod-raw-logs-stream"
          IAMRoleARN: !GetAtt SESKinesisFirehoseRole.Arn

  # Event Destination for Masked Logs Firehose
  MaskedLogsEventDestination:
    Type: AWS::SES::ConfigurationSetEventDestination
    Condition: EnableKinesisLoggingCondition
    Properties:
      ConfigurationSetName: !Ref SESConfigurationSetName
      EventDestination:
        Name: !Sub "${ProjectName}-${Environment}-masked-logs-event-destination"
        Enabled: !Ref EnableKinesisLogging
        MatchingEventTypes:
          - bounce
          - complaint
          - delivery
          - send
          - reject
          - open
          - click
        KinesisFirehoseDestination:
          DeliveryStreamARN: !Sub "arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/aws-ses-migration-prod-masked-logs-stream"
          IAMRoleARN: !GetAtt SESKinesisFirehoseRole.Arn



Outputs:
  SESCloudWatchLogsRoleArn:
    Description: ARN of the SES CloudWatch Logs IAM role
    Value: !GetAtt SESCloudWatchLogsRole.Arn
    Export:
      Name: !Sub "${ProjectName}-${Environment}-ses-cloudwatch-logs-role-arn"

  SESEventSNSTopicArn:
    Description: ARN of the SES Event SNS Topic
    Condition: EnableKinesisLoggingCondition
    Value: !Ref SESEventSNSTopic
    Export:
      Name: !Sub "${ProjectName}-${Environment}-ses-event-sns-topic-arn"

  KinesisEventDestinationName:
    Description: Name of the Kinesis Event Destination
    Condition: EnableKinesisLoggingCondition
    Value: !Sub "${ProjectName}-${Environment}-kinesis-event-destination"
    Export:
      Name: !Sub "${ProjectName}-${Environment}-kinesis-event-destination-name"

  SESEventSNSTopicName:
    Description: Name of the SES Event SNS Topic
    Value: !Ref SESEventSNSTopic
    Export:
      Name: !Sub "${ProjectName}-${Environment}-ses-event-sns-topic-name"
