{#

2024-10-25
    "StrictHostKeyChecking" の抑制を、限定した "Host" のみ、としていた。
    例．
        Host gooid-21-pro-fgw-* idhub-21-pro-web-*

    しかし、goo決済バッチなどで、 "ssh localhost" といった謎の処理をしており、
    上記のような形での運用でバッチエラーにより損害が出た。

    潜在的なSSH通信が存在し、すべての網羅が難しい。
    以下のように、全てのHostに対して"StrictHostKeyChecking" を抑制する。

        Host *
#}
{% if server_role in ['batch'] %}
#
# Batch <-> fgw-000 (VIP) or web-00x にSCPする際、
# リモート側のActive/Standbyが変わったとしてもHost Keyチェックでエラーとならないよう無視。
#
#   SSHコマンドの警告メッセージを出さないためのオプション #SSH - Qiita
#   https://qiita.com/liubin/items/654ea5ace65a8c3cc56b
#
{# Host gooid-21-{{release_env}}-fgw-* {{service_code}}-{{release_env}}-web-* #}
Host *
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null
    LogLevel error

{% elif server_role in ['rproxy'] %}
#
# rproxyのノード間でSSL証明書をSCPする際、Host Keyチェックでエラーとならないよう無視。
# 例． gooid-21-pro-rproxy-001 <---> gooid-21-pro-rproy-002
#
#   SSHコマンドの警告メッセージを出さないためのオプション #SSH - Qiita
#   https://qiita.com/liubin/items/654ea5ace65a8c3cc56b
#
{# Host {{service_code}}-{{release_env}}-{{server_role}}-* #}
Host *
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null
    LogLevel error

{% elif server_role in ['web'] %}
{# TODO: RoleごとにSSH Client configファイルを定義していきます。 #}
{% else %}
{# TODO #}
{% endif %}
