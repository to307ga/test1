# 保守運用ユーティリティースクリプトを、このDIRに置いていきます。
---
- name: /usr/local/app の作成
  file:
    state: directory
    path: /usr/local/app
    ## Ownerは、対象サーバごとに tomcat だったり gooscp ユーザに、他の箇所で指定されているため、そちらを尊重。
    ## ここではあえて明示的に指定しない。
    ##owner: gooscp
    ##group: gooscp
    mode: 0755

- name: 保守運用ユーティリティースクリプト配置用ディレクトリの作成
  file:
    state: directory
    path: /usr/local/app/script
    owner: gooscp
    group: gooscp
    mode: 0755

#
# 再帰的にファイルを配布します。
# まず配布元のDIRを再帰的に、リモートでも作成。
# 次に、そのDIRにファイルを配布していきます。
#
# 参考：
#   Ansible: 値を(when:ではなく) if文を用いて条件によって変更する - Qiita : https://bit.ly/45FsGV8
#   Ansible 複数ファイルを対象にループする方法を整理 - Qiita : https://bit.ly/3oGFDNI
#
- name: 保守運用スクリプトの配置（実行可能ファイル）、DIR作成
  file:
    path: /usr/local/app/script/{{ item.path }}
    owner: gooscp
    group: gooscp
    mode: 0755
    state: directory
  with_filetree:
    - files/script
  when: item.state == 'directory'

- name: 保守運用スクリプトの配置（実行可能ファイル）、ファイル配布
  copy:
    src: "files/script/{{ item.path }}"
    dest: /usr/local/app/script/{{ item.path }}
    owner: gooscp
    group: gooscp
    # ローカルのリンク情報をそのままsymlinkとして作成する指定。ただ効かないようだ。
    # 後続で、個別にSymlink作成
    follow: yes
    local_follow: yes
    # 拡張子によって、executableなmode=0755を指定します。
    mode: >-
      {%- if item.state in [ 'file', 'link' ] and item.path is match(".*\.sh$") -%} 0755
      {%- else -%} 644
      {%- endif -%}
  with_filetree:
    - files/script
  when: item.state not in [ 'directory', 'link' ]

- name: Check transfer-s3.sh source file exists
  stat:
    path: /usr/local/app/script/transfer-s3/src/transfer-s3.sh
  register: register_transfer_s3_src_file

- name: link transfer-s3.sh to transfer-s3/src/transfer-s3.sh
  file:
    state: link
    src: /usr/local/app/script/transfer-s3/src/transfer-s3.sh
    dest: /usr/local/app/script/transfer-s3.sh
    owner: gooscp
    group: gooscp
    # 下記 follow 属性を設定しないと、ここで指定したOwnerでSymlinkが作成されない。
    follow: false
  # dryrun時にエラーにならないよう、ソースファイルが存在する時のみ実行
  when: register_transfer_s3_src_file.stat.exists and register_transfer_s3_src_file.stat.isreg
