#
# archive DB
#   sock    : /var/lib/mysql/mysql.sock
#   port    : 3306
#
[mysqld]
######################################################################
# main settings
######################################################################
port = 3306
socket = /var/lib/mysql/mysql.sock
pid-file = /var/run/mariadb/mariadb.pid
datadir = /db0/mysql
character_set_server = utf8

######################################################################
# replication settings for master and slave
######################################################################
## ansibleでmysqlのserver-idを生成 - おっさんエンジニアの忘備録
## https://saosao_0706.hatenablog.com/entry/2019/02/27/182155
server_id = {{ ansible_default_ipv4.address.split('.')[1].zfill(3)}}{{ ansible_default_ipv4.address.split('.')[2].zfill(3)}}{{ ansible_default_ipv4.address.split('.')[3].zfill(3)}}1

######################################################################
# replication settings for master only
######################################################################
log_bin = /dblog/binlog/bin.log
binlog_format = ROW
### gooid20-pro-edbでは永久（=0）としていたが、14日間を指定
expire_logs_days = 14

### binlogへの同期を待たないようにして更新性能を向上させます
### MySQLのレプリケーションでありがちな10の問題 | Yakst : https://yakst.com/ja/posts/1372
sync_binlog = 0

## 初回構築作業用
## データのリストアを速くする設定
## （効果の程は不明。おまじない）
## backup _ MySQL any way to import a huge (32 GB) sql dump faster? _ Database Administrators Stack Exchange
## https://dba.stackexchange.com/questions/83125/mysql_any-way-to-import-a-huge-32-gb-sql-dump-faster
#disable_log_bin
#log_slave_updates=OFF
#innodb_doublewrite=OFF
#innodb_flush_log_at_trx_commit=0

######################################################################
# replication settings for slave only
######################################################################

# レプリケーションサーバの時、skip_slave_start、report_hostの２つを利用する
{% if galera_func is defined and galera_func == "replication" %}
skip_slave_start
## Slave SQL Threadを並列に。MariaDB特有の設定 https://bit.ly/3vBSe5r
slave_parallel_threads=8
report_host = {{ inventory_hostname_short }}
read_only = ON
{% else %}
#skip_slave_start
#report_host = {{ inventory_hostname_short }}
{% endif %}

#replicate_do_db=PDB02
#replicate_ignore_table = PDB02.async_message

######################################################################
# log settings
######################################################################
log_error = /var/log/mariadb/mariadb.log
slow_query_log = 1
slow_query_log_file = /var/log/mariadb/mariadb-slow.log
long_query_time = 2
general_log = OFF
general_log_file = /dblog/log/mariadb-{{ inventory_hostname_short }}-general.log

######################################################################
## Table Encryption
#######################################################################
plugin_dir=/usr/lib64/mysql/plugin
plugin_load_add=file_key_management.so

######################################################################
# misc.
######################################################################
symbolic_links = 0
tmpdir = /db0/loaddata/
sql_mode = 'ALLOW_INVALID_DATES'
table_definition_cache=464

######################################################################
### INNODB Specific options
######################################################################
## 商用 2,500 だが運用系なので、少なく
max_connections = 30
table_open_cache = 30
max_allowed_packet = 16M
binlog_cache_size = 1M
max_heap_table_size = 64M
sort_buffer_size = 4M
join_buffer_size = 4M
thread_cache_size = 800
query_cache_size = 128M
query_cache_limit = 2M
thread_stack = 192K
#########
###
### 2022-04 の性能試験において、idhub の d_idhub_session テーブルへ過度の大量のINSERTが発生すると、
### Deadlock が発生する傾向が見られました。
### 下記、トランザクション分離レベルを、REPEATABLE READ (default) から、READ COMMITED にして、
### 一貫性を多少犠牲にすることで、これを解消できました。
###
### Deadlockが多発した場合には検討してください。
### サーバ全体への適用ではなく、セッションレベルで必要な箇所での分離レベル変更を推奨します。
### SET TRANSACTION ISOLATION LEVEL READ-COMMITTED;
###
###     トランザクション分離レベルについてのまとめ - Qiita
###     https://qiita.com/song_ss/items/38e514b05e9dabae3bdb
###
### ただしSTATEMENT Based Replication (SBR, binlog_format=STATMENT) だと、READ-COMMITTEDが使えないので注意
### 日々の覚書: MySQL 5.7で暗黙のデフォルトが変わりそうなはなし : https://bit.ly/3P6tQRk
#########
transaction_isolation = REPEATABLE-READ
#transaction_isolation = READ-COMMITTED

tmp_table_size = 64M
read_buffer_size = 4M
read_rnd_buffer_size = 4M

## 物理メモリの70%を指定します。  https://bit.ly/3811hnA
## その70%のうち、10%を、このArchive DBで利用します。
innodb_buffer_pool_size = {{ (ansible_memtotal_mb * 0.1) | int }}M
innodb_data_file_path = ibdata1:10M:autoextend
innodb_write_io_threads = 8
innodb_read_io_threads = 8
innodb_log_buffer_size = 8M
innodb_log_file_size = 256M
innodb_max_dirty_pages_pct = 90
innodb_lock_wait_timeout = 120
### MariaDB+GaleraClusterの運用事例(MySQL勉強会2016-01-28)  https://bit.ly/3tizTcA
### では、"innodb_flush_log_at_trx_commit=0"にすると書き込み性能が3倍向上、とのこと。
### 以下では0, 2が早い、とのこと。
### https://mariadb.com/docs/reference/mdb/system-variables/innodb_flush_log_at_trx_commit/
innodb_flush_log_at_trx_commit=0

[mariadb]
######################################################################
### Table Encryption
########################################################################
# encryption plugin
plugin_load_add = file_key_management.so
file_key_management_filename = /etc/mysql/encryption/keyfile.enc
file_key_management_filekey = FILE:/etc/mysql/encryption/key.txt
file_key_management_encryption_algorithm=AES_CBC
#
## 新規にテーブル構築時、テーブルを暗号化する 
innodb_encrypt_tables = ON
#
[mariadb-{{ mariadb_version }}]
