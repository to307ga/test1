<IfModule mod_security2.c>
    # This is the ModSecurity Core Rules Set.

    # Basic configuration goes in here
    #Include modsecurity.d/*.conf
    #Include modsecurity.d/activated_rules/*.conf

    # Additional items taken from new minimal modsecurity conf
    # Basic configuration options
    SecRuleEngine On
    SecRequestBodyAccess On
    #SecResponseBodyAccess On
    SecResponseBodyAccess Off

    # Handling of file uploads
    # TODO Choose a folder private to Apache.
    # SecUploadDir /opt/apache-frontend/tmp/
    SecUploadKeepFiles Off
    SecUploadFileLimit 10

    # Debug log
    SecDebugLog /var/log/httpd/modsec_debug.log
    SecDebugLogLevel 0

    # Audit log
    SecAuditEngine RelevantOnly
    SecAuditLogRelevantStatus ^5
    SecAuditLogType Serial
    #SecAuditLogParts ABIFHZ
    SecAuditLogParts ABFZ
    SecAuditLog "|/usr/sbin/rotatelogs /var/log/httpd/modsec_audit.log.%Y%m%d 86400 540"
    LogFormat "%V %h %t %{UNIQUE_ID}e \"%r\" %>s %X | %I %O | %<{mod_security-time1}n %<{mod_security-time2}n %<{mod_security-time3}n %D" mperformance
    CustomLog "|/usr/sbin/rotatelogs /var/log/httpd/modsec_performance.log.%Y%m%d 86400 540" mperformance

    # Alternative mlogc configuration
    #SecAuditLogType Concurrent
    #SecAuditLogParts ABIDEFGHZ
    #SecAuditLogStorageDir /var/log/mlogc/data
    #SecAuditLog "|/usr/bin/mlogc /etc/mlogc.conf"

    # Set Data Directory
    SecTmpDir /var/lib/mod_security
    SecDataDir /var/lib/mod_security

    <LocationMatch ^/id/authn/Login>
        # ホワイトリストに登録されたIPアドレスの場合は許可する
        SecAction "id:1110,phase:2,nolog,pass,setvar:TX.SLASHED_REMOTE_ADDR=/%{REMOTE_ADDR}/"
        SecRule TX:SLASHED_REMOTE_ADDR "@pmFromFile ipaddress_white_list.txt" "id:1120,phase:2,nolog,allow"

        # グレイリストに登録された国コードからのアクセスはリスクをミドルにして処理継続
        # SecRuleScript "/etc/httpd/conf.d/geo.mysql.lua" "chain,id:1210,phase:2,log,pass,msg:'TX:COUNTRY_CODE==%{TX.COUNTRY_CODE}, gooidc_risk=middle'"
        # SecRule TX:COUNTRY_CODE "@pmFromFile countrycode_gray_list.txt" "log,setenv:gooidc_risk=middle"

        # ユーザ名(uname)を指定してログイン画面に20秒以内に3回超アクセス来たらリスクをミドルにして処理継続、
        # 同様に20秒以内に10回超アクセス来たら10分間403で拒否する。
        SecAction "id:1310,initcol:IP=%{REMOTE_ADDR},phase:2,pass,nolog"
        SecRule ARGS:uname "!^$" "id:1320,phase:2,log,pass,msg:'ARGS:uname==%{ARGS.uname}',setvar:IP.LOGIN_COUNTS=+1,expirevar:IP.LOGIN_COUNTS=20"
        SecRule IP:LOGIN_COUNTS "@gt 10" "id:1330,phase:2,log,pass,msg:'IP:LOGIN_COUNTS==%{IP.LOGIN_COUNTS}',setvar:IP.BLOCKED=1,expirevar:IP.BLOCKED=600"
        SecRule IP:BLOCKED "@eq 1" "id:1340,phase:2,log,deny,msg:'IP:BLOCKED==%{IP.BLOCKED}, gooidc_risk=high}',status:403,setenv:gooidc_risk=high"
        SecRule IP:LOGIN_COUNTS "@gt 3" "id:1350,phase:2,log,pass,msg:'IP:LOGIN_COUNTS==%{IP.LOGIN_COUNTS}, gooidc_risk=middle',setenv:gooidc_risk=middle"

        # リスクフラグが立っていた場合、HTTPリクエストヘッダx-gooidc-risk にリスクレベルを設定
        RequestHeader append "x-gooidc-risk" "%{gooidc_risk}e" env=gooidc_risk
    </LocationMatch>

    <LocationMatch ^/id/portal/ForgotPw>
        # ホワイトリストに登録されたIPアドレスの場合は許可する
        SecAction "id:2110,phase:2,nolog,pass,setvar:TX.SLASHED_REMOTE_ADDR=/%{REMOTE_ADDR}/"
        SecRule TX:SLASHED_REMOTE_ADDR "@pmFromFile ipaddress_white_list.txt" "id:2120,phase:2,nolog,allow"

        # ユーザ名(GooID)を指定してログイン画面に60秒以内に5回超アクセス来たら60秒間403で拒否する。
        SecAction "id:2210,initcol:IP=%{REMOTE_ADDR},phase:2,pass,nolog"
        SecRule ARGS:GooID "!^$" "id:2220,phase:2,pass,msg:'ARGS:uname==%{ARGS.GooID}',setvar:IP.PW_COUNTS=+1,expirevar:IP.PW_COUNTS=60"
        SecRule IP:PW_COUNTS "@gt 5" "id:2230,phase:2,deny,status:403,msg:'IP:PW_COUNTS==%{IP.PW_COUNTS}'"
    </LocationMatch>

    <LocationMatch ^/id/authn/AccountUnlock>
        # ホワイトリストに登録されたIPアドレスの場合は許可する
        SecAction "id:3110,phase:2,nolog,pass,setvar:TX.SLASHED_REMOTE_ADDR=/%{REMOTE_ADDR}/"
        SecRule TX:SLASHED_REMOTE_ADDR "@pmFromFile ipaddress_white_list.txt" "id:3120,phase:2,nolog,allow"

        # ユーザ名(GooID)を指定してログイン画面に60秒以内に5回超アクセス来たら60秒間403で拒否する。
        SecAction "id:3210,initcol:IP=%{REMOTE_ADDR},phase:2,pass,nolog"
        SecRule ARGS:GooID "!^$" "id:3220,phase:2,pass,msg:'ARGS:uname==%{ARGS.GooID}',setvar:IP.UNLOCK_COUNTS=+1,expirevar:IP.UNLOCK_COUNTS=60"
        SecRule IP:UNLOCK_COUNTS "@gt 5" "id:3230,phase:2,deny,status:403,msg:'IP:UNLOCK_COUNTS==%{IP.UNLOCK_COUNTS}'"
    </LocationMatch>

    <LocationMatch ^/id/portal/SearchGooid>
        # ホワイトリストに登録されたIPアドレスの場合は許可する
        SecAction "id:4110,phase:2,nolog,pass,setvar:TX.SLASHED_REMOTE_ADDR=/%{REMOTE_ADDR}/"
        SecRule TX:SLASHED_REMOTE_ADDR "@pmFromFile ipaddress_white_list.txt" "id:4120,phase:2,nolog,allow"

        # メールアドレス(MailAddress1)を指定して60秒以内に5回超アクセス来たら60秒間403で拒否する。
        SecAction "id:4210,initcol:IP=%{REMOTE_ADDR},phase:2,pass,nolog"
        SecRule ARGS:MailAddress1 "!^$" "id:4220,phase:2,pass,msg:'ARGS:mailaddress==%{ARGS.MailAddress1}',setvar:IP.IDSEARCH_COUNTS=+1,expirevar:IP.IDSEARCH_COUNTS=60"
        SecRule IP:IDSEARCH_COUNTS "@gt 5" "id:4230,phase:2,deny,status:403,msg:'IP:IDSEARCH_COUNTS==%{IP.IDSEARCH_COUNTS}'"
    </LocationMatch>

    <LocationMatch ^/api/portal/gooidstatus>
        # ホワイトリストに登録されたIPアドレスの場合は許可する
        SecAction "id:5110,phase:2,nolog,pass,setvar:TX.SLASHED_REMOTE_ADDR=/%{REMOTE_ADDR}/"
        SecRule TX:SLASHED_REMOTE_ADDR "@pmFromFile ipaddress_white_list.txt" "id:5120,phase:2,nolog,allow"

        # 同一IPアドレスから60秒以内に10回超アクセス来たら60秒間403で拒否する。
        SecAction "id:5210,initcol:IP=%{REMOTE_ADDR},phase:2,pass,nolog"
        SecRule ARGS:gooid "!^$" "id:5220,phase:2,pass,msg:'ARGS:gooID==%{ARGS.gooid}',setvar:IP.GOOIDSTATUS_COUNTS=+1,expirevar:IP.GOOIDSTATUS_COUNTS=60"
        SecRule IP:GOOIDSTATUS_COUNTS "@gt 10" "id:5230,phase:2,deny,status:403,msg:'IP:GOOIDSTATUS_COUNTS==%{IP.GOOIDSTATUS_COUNTS}'"
    </LocationMatch>
</IfModule>
