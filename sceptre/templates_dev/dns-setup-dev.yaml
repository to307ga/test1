AWSTemplateFormatVersion: '2010-09-09'
Description: 'DNS Setup for Development Environment - Manual DNS coordination for BYODKIM'

Parameters:
  ProjectName:
    Type: String
    Description: Project name for resource naming
    Default: aws-ses-migration

  Environment:
    Type: String
    Description: Environment name
    AllowedValues:
      - development
      - staging
      - production
      - prod
      - dev
    Default: development

  DomainName:
    Type: String
    Description: Domain name for DNS setup
    Default: goo.ne.jp

  DKIMSeparator:
    Type: String
    Description: DKIM separator for development environment
    Default: gooid-21-dev

  DKIMPublicKey:
    Type: String
    Description: DKIM public key from phase-2
    Default: "placeholder-will-be-generated-by-lambda"
    NoEcho: false

  DNSOperatorRole:
    Type: String
    Description: IAM role ARN for DNS operations
    Default: arn:aws:iam::123456789012:role/DNSOperatorRole

  TTL:
    Type: Number
    Description: DNS record TTL (seconds)
    Default: 300
    MinValue: 60
    MaxValue: 86400

  PriorityLevel:
    Type: String
    Description: Priority level for DNS changes
    Default: low
    AllowedValues: [low, medium, high, critical]

  DNSContactEmail:
    Type: String
    Description: Contact email for DNS team
    Default: dns-dev@goo.ne.jp

  TechnicalContactName:
    Type: String
    Description: Technical contact name
    Default: Development Team

  TechnicalContactEmail:
    Type: String
    Description: Technical contact email
    Default: dev-team@goo.ne.jp

  NotificationTopicArn:
    Type: String
    Description: SNS topic ARN for notifications

  KMSKeyArn:
    Type: String
    Description: KMS key ARN for encryption

Resources:
  # DNS Coordination Lambda Function for Development
  DNSCoordinationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-${Environment}-dns-coordination"
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt DNSCoordinationRole.Arn
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          PROJECT_NAME: !Ref ProjectName
          ENVIRONMENT: !Ref Environment
          DOMAIN_NAME: !Ref DomainName
          DKIM_SEPARATOR: !Ref DKIMSeparator
          DNS_CONTACT_EMAIL: !Ref DNSContactEmail
          TECHNICAL_CONTACT: !Ref TechnicalContactName
          PRIORITY_LEVEL: !Ref PriorityLevel
          TTL: !Ref TTL
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import logging
          from datetime import datetime

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              try:
                  logger.info(f"Phase 6 DNS Coordination event: {json.dumps(event)}")

                  # Environment variables
                  project_name = os.environ['PROJECT_NAME']
                  environment = os.environ['ENVIRONMENT']
                  domain_name = os.environ['DOMAIN_NAME']
                  dkim_separator = os.environ['DKIM_SEPARATOR']
                  dns_contact = os.environ['DNS_CONTACT_EMAIL']
                  priority = os.environ['PRIORITY_LEVEL']
                  ttl = os.environ['TTL']

                  # Check if this is a direct EventBridge input or CloudFormation event
                  if 'phase' in event and event.get('phase') == '6':
                      # Direct EventBridge trigger with phase info
                      logger.info("Processing Phase 6 DNS coordination trigger")
                      dkim_record_name = f"{event['dkimSeparator']}._domainkey.{event['domain']}"
                  else:
                      # CloudFormation stack event trigger
                      logger.info("Processing CloudFormation stack completion trigger")
                      dkim_record_name = f"{dkim_separator}._domainkey.{domain_name}"

                  # DNS record details for manual setup
                  dns_records = {
                      "domain": domain_name,
                      "environment": environment,
                      "dkim_record": {
                          "name": dkim_record_name,
                          "type": "TXT",
                          "ttl": int(ttl),
                          "priority": priority,
                          "purpose": "BYODKIM public key for development"
                      },
                      "contact_info": {
                          "dns_team_email": dns_contact,
                          "priority_level": priority,
                          "environment_type": "development"
                      },
                      "instructions": {
                          "action": "Please create the following DNS TXT record for development BYODKIM",
                          "note": "This is for development environment testing only",
                          "coordination_required": True
                      }
                  }

                  # Log DNS coordination information
                  logger.info(f"DNS coordination completed for {environment}: {json.dumps(dns_records, indent=2)}")

                  return {
                      'statusCode': 200,
                      'body': json.dumps({
                          'message': 'DNS coordination completed for development environment',
                          'dns_records': dns_records
                      })
                  }

              except Exception as e:
                  logger.error(f"Error in DNS coordination: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps({
                          'error': str(e)
                      })
                  }

      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-dns-coordination"
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: "DNS coordination for development"

  # IAM Role for DNS Coordination Lambda
  DNSCoordinationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-${Environment}-dns-coordination-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DNSCoordinationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ProjectName}-${Environment}-dns-coordination*"
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref NotificationTopicArn
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: !Ref KMSKeyArn

  # CloudWatch Log Group for DNS Coordination
  DNSCoordinationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ProjectName}-${Environment}-dns-coordination"
      RetentionInDays: 30
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-dns-coordination-logs"
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # EventBridge Rule to trigger DNS coordination process
  DNSCoordinationTriggerRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${ProjectName}-${Environment}-phase-6-dns-trigger"
      Description: "Trigger Phase 6: DNS coordination for development"
      State: ENABLED
      EventPattern:
        source: ["aws.cloudformation"]
        detail-type: ["CloudFormation Stack Status Change"]
        detail:
          status-details:
            status: ["CREATE_COMPLETE", "UPDATE_COMPLETE"]
          stack-name: [!Ref "AWS::StackName"]
      Targets:
        - Arn: !GetAtt DNSCoordinationFunction.Arn
          Id: "DNSCoordinationTarget"
          Input: !Sub |
            {
              "phase": "6",
              "action": "dns_coordination",
              "domain": "${DomainName}",
              "dkimSeparator": "${DKIMSeparator}",
              "environment": "${Environment}",
              "projectName": "${ProjectName}",
              "dnsContactEmail": "${DNSContactEmail}",
              "technicalContactName": "${TechnicalContactName}",
              "priorityLevel": "${PriorityLevel}",
              "ttl": "${TTL}",
              "isDevelopment": true
            }

  # Lambda permission for EventBridge
  DNSCoordinationEventBridgePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DNSCoordinationFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt DNSCoordinationTriggerRule.Arn

  # SNS Topic for DNS coordination notifications
  DNSCoordinationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${ProjectName}-${Environment}-dns-coordination"
      DisplayName: !Sub "${ProjectName} ${Environment} DNS Coordination"
      KmsMasterKeyId: !Ref KMSKeyArn
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-dns-coordination-topic"
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # SNS Subscription for DNS team notifications
  DNSCoordinationSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref DNSCoordinationTopic
      Protocol: email
      Endpoint: !Ref DNSContactEmail

Outputs:
  DNSCoordinationFunctionArn:
    Description: ARN of the DNS coordination function
    Value: !GetAtt DNSCoordinationFunction.Arn
    Export:
      Name: !Sub "${ProjectName}-${Environment}-dns-coordination-function-arn"

  DNSCoordinationFunctionName:
    Description: Name of the DNS coordination function
    Value: !Ref DNSCoordinationFunction
    Export:
      Name: !Sub "${ProjectName}-${Environment}-dns-coordination-function-name"

  DNSCoordinationTopicArn:
    Description: ARN of the DNS coordination SNS topic
    Value: !Ref DNSCoordinationTopic
    Export:
      Name: !Sub "${ProjectName}-${Environment}-dns-coordination-topic-arn"

  DKIMRecordName:
    Description: DKIM record name for DNS setup
    Value: !Sub "${DKIMSeparator}._domainkey.${DomainName}"
    Export:
      Name: !Sub "${ProjectName}-${Environment}-dkim-record-name"

  DNSSetupInstructions:
    Description: Instructions for DNS team
    Value: !Sub "Please create TXT record: ${DKIMSeparator}._domainkey.${DomainName} with BYODKIM public key (TTL: ${TTL}, Priority: ${PriorityLevel})"
    Export:
      Name: !Sub "${ProjectName}-${Environment}-dns-setup-instructions"

  EnvironmentType:
    Description: Environment type for DNS coordination
    Value: !Sub "${Environment}-dns-coordination"
    Export:
      Name: !Sub "${ProjectName}-${Environment}-dns-coordination-type"
