AWSTemplateFormatVersion: '2010-09-09'
Description: 'DNS management team collaboration for DKIM setup'

Parameters:
  ProjectName:
    Type: String
    Description: Project name for resource naming
    Default: aws-ses-migration

  Environment:
    Type: String
    Description: Environment name
    AllowedValues:
      - development
      - staging
      - production
      - prod
    Default: development

  DKIMManagerFunctionArn:
    Type: String
    Description: ARN of the DKIM Manager Lambda function

  DNSTeamEmail:
    Type: String
    Description: Email address for DNS management team
    Default: dns-team@example.com

  SlackWebhookURL:
    Type: String
    Description: Slack webhook URL for notifications
    Default: ""

  LambdaRuntime:
    Type: String
    Description: Lambda function runtime
    Default: "python3.13"
    AllowedValues: ["python3.9", "python3.10", "python3.11", "python3.12", "python3.13"]
    NoEcho: true

Resources:
  # SNS Topic for DNS team notifications
  DNSTeamNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${ProjectName}-${Environment}-dns-team-notifications"
      DisplayName: !Sub "DNS Team Notifications - ${Environment}"
      KmsMasterKeyId: alias/aws/sns
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-dns-team-notifications"
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: "DNS team notifications"

  # Email subscription for DNS team
  DNSTeamEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref DNSTeamNotificationTopic
      Protocol: email
      Endpoint: !Ref DNSTeamEmail

  # Lambda function for DNS notification
  DNSNotifierFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-${Environment}-dns-notifier"
      Runtime: !Ref LambdaRuntime
      Handler: index.lambda_handler
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/${ProjectName}-${Environment}-dkim-manager-role"
      Timeout: 60
      MemorySize: 256
      Code:
        ZipFile: |
          import json
          import boto3
          import logging
          import os
          from datetime import datetime
          import urllib3

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          sns_client = boto3.client('sns')
          s3_client = boto3.client('s3')
          events_client = boto3.client('events')

          def lambda_handler(event, context):
              """
              DNS Notifier Lambda handler
              """
              try:
                  logger.info(f"Received event: {json.dumps(event)}")

                  # Get configuration from environment variables
                  topic_arn = os.environ['DNS_NOTIFICATION_TOPIC_ARN']
                  bucket_name = os.environ['CERTIFICATES_BUCKET_NAME']
                  domain = os.environ.get('DOMAIN_NAME', 'goo.ne.jp')

                  # Get DNS records from S3
                  dns_records = get_dns_records_from_s3(bucket_name, domain)

                  # Create notification message
                  message = create_dns_notification_message(domain, dns_records)

                  # Send SNS notification
                  response = sns_client.publish(
                      TopicArn=topic_arn,
                      Subject=f"URGENT: DNS CNAME Records Required for {domain}",
                      Message=message
                  )

                  # Send Slack notification if webhook URL is provided
                  slack_webhook = os.environ.get('SLACK_WEBHOOK_URL')
                  if slack_webhook:
                      send_slack_notification(slack_webhook, domain, dns_records)

                  logger.info("DNS_NOTIFICATION_SENT: DNS team notification sent successfully")

                  # Send EventBridge event to trigger Phase 7
                  send_phase_7_trigger_event(domain, os.environ.get('ENVIRONMENT', 'prod'), os.environ.get('PROJECT_NAME', 'aws-ses-migration'))

                  return {
                      'statusCode': 200,
                      'body': json.dumps({
                          'message': 'DNS notification sent',
                          'messageId': response['MessageId'],
                          'domain': domain,
                          'phase_7_triggered': True
                      })
                  }

              except Exception as e:
                  logger.error(f"ERROR: {str(e)}")
                  raise

          def get_dns_records_from_s3(bucket_name, domain):
              """Get DNS records from S3"""
              try:
                  # List all objects to find the latest DNS records file
                  response = s3_client.list_objects_v2(
                      Bucket=bucket_name,
                      Prefix=f"dns_records/{domain}/"
                  )

                  if 'Contents' not in response:
                      logger.warning(f"No DNS records found in S3 for domain: {domain}")
                      return []

                  # Get the latest file by LastModified timestamp
                  latest_file = sorted(response['Contents'], key=lambda x: x['LastModified'])[-1]
                  logger.info(f"Using latest DNS records file: {latest_file['Key']}")

                  # Read the file content
                  obj_response = s3_client.get_object(
                      Bucket=bucket_name,
                      Key=latest_file['Key']
                  )

                  dns_records = json.loads(obj_response['Body'].read().decode('utf-8'))
                  logger.info(f"Retrieved {len(dns_records)} DNS records from S3")

                  return dns_records

              except Exception as e:
                  logger.error(f"Error getting DNS records from S3: {str(e)}")
                  return []

          def create_dns_notification_message(domain, dns_records):
              """Create DNS notification message"""
              message = f"""
          URGENT: DNS Records Required for BYODKIM Setup

          Domain: {domain}
          Deadline: 2 weeks from today
          Priority: HIGH (System operation dependent)

          Required DNS Records for BYODKIM:
          """

              for i, record in enumerate(dns_records, 1):
                  message += f"""
          {i}. Record Name: {record['name']}
             Record Type: {record['type']}
             Record Value: {record['value']}
          """

              message += f"""

          Instructions:
          1. Please add these DNS records to the DNS configuration for {domain}
          2. For TXT records, ensure the entire value is properly quoted and configured
          3. Ensure all records are properly configured and propagated
          4. Notify the system administrator once DNS changes are complete
          5. DNS propagation may take up to 72 hours

          Note: This is for BYODKIM (Bring Your Own DKIM) setup, not standard AWS EasyDKIM.

          Contact: System Administrator
          Date: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}

          This is an automated notification from the DKIM certificate management system.
          """

              return message

          def send_slack_notification(webhook_url, domain, dns_records):
              """Send Slack notification"""
              try:
                  http = urllib3.PoolManager()

                  records_text = "\n".join([
                      f"â€¢ {record['name']} {record['type']} {record['value']}"
                      for record in dns_records
                  ])

                  payload = {
                      "text": f":warning: URGENT: DNS Records Required for BYODKIM",
                      "attachments": [
                          {
                              "color": "warning",
                              "fields": [
                                  {
                                      "title": "Domain",
                                      "value": domain,
                                      "short": True
                                  },
                                  {
                                      "title": "Deadline",
                                      "value": "2 weeks",
                                      "short": True
                                  },
                                  {
                                      "title": "Required DNS Records",
                                      "value": f"```{records_text}```",
                                      "short": False
                                  }
                              ]
                          }
                      ]
                  }

                  response = http.request(
                      'POST',
                      webhook_url,
                      body=json.dumps(payload),
                      headers={'Content-Type': 'application/json'}
                  )

                  logger.info(f"Slack notification sent: {response.status}")

              except Exception as e:
                  logger.error(f"Error sending Slack notification: {str(e)}")

          def send_phase_7_trigger_event(domain, environment, project_name):
              """Send EventBridge event to trigger Phase 7"""
              try:
                  event_detail = {
                      "phase": "7",
                      "environment": environment,
                      "project": project_name,
                      "domain": domain,
                      "triggered_by": "phase_5_completion",
                      "timestamp": datetime.utcnow().isoformat()
                  }

                  response = events_client.put_events(
                      Entries=[
                          {
                              'Source': 'aws.byodmim',
                              'DetailType': 'Phase 7 Trigger',
                              'Detail': json.dumps(event_detail)
                          }
                      ]
                  )

                  logger.info(f"PHASE_7_TRIGGER_SENT: EventBridge event sent for Phase 7 execution")
                  logger.info(f"Event response: {response}")

              except Exception as e:
                  logger.error(f"Error sending Phase 7 trigger event: {str(e)}")
                  # Don't raise exception - Phase 5 completion should not fail due to Phase 7 trigger

      Environment:
        Variables:
          DNS_NOTIFICATION_TOPIC_ARN: !Ref DNSTeamNotificationTopic
          CERTIFICATES_BUCKET_NAME: !Sub "${ProjectName}-${Environment}-dkim-certificates"
          DOMAIN_NAME: goo.ne.jp
          SLACK_WEBHOOK_URL: !Ref SlackWebhookURL
          ENVIRONMENT: !Ref Environment
          PROJECT_NAME: !Ref ProjectName
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-dns-notifier"
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: "DNS team notification"

  # EventBridge Rule to trigger Phase 5 execution
  Phase5TriggerRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${ProjectName}-${Environment}-phase-5-trigger"
      Description: "Trigger Phase 5: DNS team collaboration"
      State: ENABLED
      EventPattern:
        source: ["aws.byodmim"]
        detail-type: ["Phase 5 Trigger"]
        detail:
          phase: ["5"]
          environment: [!Ref Environment]
          project: [!Ref ProjectName]
      Targets:
        - Arn: !GetAtt DNSNotifierFunction.Arn
          Id: "DNSNotifierPhase5Target"
          Input: !Sub |
            {
              "phase": "5",
              "action": "dns_notification",
              "domain": "goo.ne.jp",
              "environment": "${Environment}",
              "projectName": "${ProjectName}"
            }

  # Lambda permission for EventBridge
  DNSNotifierEventBridgePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DNSNotifierFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt Phase5TriggerRule.Arn

Outputs:
  DNSTeamNotificationTopicArn:
    Description: ARN of the DNS team notification topic
    Value: !Ref DNSTeamNotificationTopic
    Export:
      Name: !Sub "${ProjectName}-${Environment}-dns-team-notification-topic-arn"

  DNSNotifierFunctionArn:
    Description: ARN of the DNS notifier function
    Value: !GetAtt DNSNotifierFunction.Arn
    Export:
      Name: !Sub "${ProjectName}-${Environment}-dns-notifier-function-arn"

  Phase5TriggerRuleArn:
    Description: ARN of the Phase 5 trigger EventBridge rule
    Value: !GetAtt Phase5TriggerRule.Arn
    Export:
      Name: !Sub "${ProjectName}-${Environment}-phase-5-trigger-arn"

  Phase5Status:
    Description: Phase 5 DNS team collaboration status
    Value: "Ready for Phase 5 execution"
    Export:
      Name: !Sub "${ProjectName}-${Environment}-phase-5-status"
