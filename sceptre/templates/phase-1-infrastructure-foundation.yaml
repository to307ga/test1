AWSTemplateFormatVersion: '2010-09-09'
Description: 'Phase 1: Infrastructure Foundation - All infrastructure components'

Parameters:
  ProjectName:
    Type: String
    Description: Project name for resource naming

  Environment:
    Type: String
    Description: Environment name
    AllowedValues:
      - dev
      - staging
      - prod

  DomainName:
    Type: String
    Description: Domain name for DKIM

  DKIMSeparator:
    Type: String
    Description: DKIM separator for key naming

  LogRetentionDays:
    Type: Number
    Description: Log retention period in days
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]

  DNSTeamEmail:
    Type: String
    Description: Email address for DNS management team

  LambdaRuntime:
    Type: String
    Description: Lambda function runtime
    Default: "python3.13"
    AllowedValues: ["python3.9", "python3.10", "python3.11", "python3.12", "python3.13"]

  LogsRetentionDays:
    Type: Number
    Description: Logs retention period in days for S3 lifecycle
    AllowedValues: [1, 7, 30, 60, 90, 120, 180, 365, 400, 545, 731, 1827, 3653]

  LogsTransitionToIADays:
    Type: Number
    Description: Days before transitioning logs to Infrequent Access
    MinValue: 30
    MaxValue: 365

  LogsTransitionToGlacierDays:
    Type: Number
    Description: Days before transitioning logs to Glacier
    MinValue: 1
    MaxValue: 365

  AccessLogDestinationBucket:
    Type: String
    Description: S3 bucket for access logs (same as base.yaml)
    Default: service-logs-gooid-idhub

Resources:
  # ===================
  # IAM Roles and Policies
  # ===================

  # Lambda execution role for DKIM Manager
  DKIMManagerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-${Environment}-dkim-manager-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DKIMManagerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # SES permissions (both v1 and v2 APIs for compatibility)
              - Effect: Allow
                Action:
                  # SESv1 API permissions
                  - ses:PutEmailIdentityDkimAttributes
                  - ses:PutEmailIdentityDkimSigningAttributes
                  - ses:GetEmailIdentity
                  - ses:ListIdentities
                  - ses:CreateEmailIdentity
                  - ses:DeleteEmailIdentity
                  - ses:VerifyDomainDkim
                  - ses:VerifyDomainIdentity
                  - ses:GetIdentityDkimAttributes
                  - ses:PutIdentityDkimAttributes
                  # SESv2 API permissions for BYODKIM
                  - sesv2:GetEmailIdentity
                  - sesv2:PutEmailIdentityDkimSigningAttributes
                  - sesv2:PutEmailIdentityDkimAttributes
                  - sesv2:GetEmailIdentityPolicies
                  - sesv2:ListEmailIdentities
                  - sesv2:CreateEmailIdentity
                  - sesv2:DeleteEmailIdentity
                Resource: "*"

              # KMS permissions
              - Effect: Allow
                Action:
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                  - kms:DescribeKey
                Resource: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*"

              # Secrets Manager permissions
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:PutSecretValue
                  - secretsmanager:CreateSecret
                  - secretsmanager:UpdateSecret
                  - secretsmanager:DescribeSecret
                Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${ProjectName}/${Environment}/*"

              # S3 permissions
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub "arn:aws:s3:::${ProjectName}-${Environment}-dkim-certificates/*"

              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub "arn:aws:s3:::${ProjectName}-${Environment}-dkim-certificates"

              # CloudWatch Logs permissions
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ProjectName}-${Environment}-*"

              # SNS permissions for notifications
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${ProjectName}-${Environment}-*"

              # CloudWatch permissions for custom metrics
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"

  # CloudFormation execution role
  CloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-${Environment}-cloudformation-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/PowerUserAccess
      Policies:
        - PolicyName: CloudFormationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:*
                Resource: "*"

  # ===================
  # KMS Encryption Keys
  # ===================

  # Customer Managed Key for DKIM private key encryption
  DKIMEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub "KMS key for DKIM certificate encryption in ${Environment}"
      KeyUsage: ENCRYPT_DECRYPT
      KeySpec: SYMMETRIC_DEFAULT
      MultiRegion: false
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          # Root account access
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"

          # DKIM Manager Lambda access
          - Sid: Allow DKIM Manager Lambda
            Effect: Allow
            Principal:
              AWS: !GetAtt DKIMManagerRole.Arn
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: "*"

          # Secrets Manager service access
          - Sid: Allow Secrets Manager
            Effect: Allow
            Principal:
              Service: secretsmanager.amazonaws.com
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: "*"
            Condition:
              StringEquals:
                kms:ViaService: !Sub "secretsmanager.${AWS::Region}.amazonaws.com"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-dkim-encryption-key"
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: "DKIM certificate encryption"

  # KMS Key Alias
  DKIMEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${ProjectName}/${Environment}/dkim-encryption"
      TargetKeyId: !Ref DKIMEncryptionKey

  # ===================
  # Secrets Manager
  # ===================

  # Secret for DKIM configuration
  DKIMConfigSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${ProjectName}/${Environment}/dkim-config"
      Description: !Sub "DKIM configuration for ${DomainName} in ${Environment}"
      KmsKeyId: !Ref DKIMEncryptionKey
      SecretString: !Sub |
        {
          "domain": "${DomainName}",
          "separator": "${DKIMSeparator}",
          "key_length": "2048",
          "algorithm": "RSA-SHA256",
          "selectors": [],
          "private_key": "",
          "public_key": "",
          "dns_records": [],
          "status": "pending",
          "created_at": "",
          "expires_at": "",
          "rotation_enabled": true
        }
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-dkim-config"
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: "DKIM configuration storage"

  # Secret for SMTP authentication (if needed)
  SMTPAuthSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${ProjectName}/${Environment}/smtp-auth"
      Description: !Sub "SMTP authentication credentials for ${Environment}"
      KmsKeyId: !Ref DKIMEncryptionKey
      GenerateSecretString:
        SecretStringTemplate: '{"username": "AKIAIOSFODNN7EXAMPLE"}'
        GenerateStringKey: 'password'
        PasswordLength: 32
        ExcludeCharacters: '"@/\'
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-smtp-auth"
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: "SMTP authentication storage"

  # ===================
  # S3 Storage
  # ===================

  # S3 bucket for DKIM certificates and configuration files
  DKIMCertificatesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ProjectName}-${Environment}-dkim-certificates"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 90
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref AccessLogDestinationBucket
        LogFilePrefix: !Sub 'logs/${ProjectName}-${Environment}-dkim-certificates/ap-northeast-1/byodkim-${Environment}/'
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-dkim-certificates"
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: "DKIM certificate storage"

  # S3 bucket for system logs
  DKIMLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ProjectName}-${Environment}-dkim-logs"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldLogs
            Status: Enabled
            ExpirationInDays: !Ref LogsRetentionDays
          - Id: TransitionToIA
            Status: Enabled
            Transitions:
              - TransitionInDays: !Ref LogsTransitionToIADays
                StorageClass: STANDARD_IA
          - Id: TransitionToGlacier
            Status: Enabled
            Transitions:
              - TransitionInDays: !Ref LogsTransitionToGlacierDays
                StorageClass: GLACIER
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref AccessLogDestinationBucket
        LogFilePrefix: !Sub 'logs/${ProjectName}-${Environment}-dkim-logs/ap-northeast-1/byodkim-${Environment}/'
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-dkim-logs"
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: "System log storage"

  # S3 bucket for Lambda layers
  LambdaLayersBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ProjectName}-${Environment}-lambda-layers"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 90
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref AccessLogDestinationBucket
        LogFilePrefix: !Sub 'logs/${ProjectName}-${Environment}-lambda-layers-v2/ap-northeast-1/byodkim-${Environment}/'
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-lambda-layers-v2"
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: "Lambda layers storage"

  # Bucket policy for DKIM certificates bucket
  DKIMCertificatesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: DKIMManagerRole
    Properties:
      Bucket: !Ref DKIMCertificatesBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowDKIMManagerAccess
            Effect: Allow
            Principal:
              AWS: !GetAtt DKIMManagerRole.Arn
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
              - s3:GetObjectVersion
              - s3:PutObjectAcl
            Resource: !Sub "${DKIMCertificatesBucket.Arn}/*"

          - Sid: AllowDKIMManagerListBucket
            Effect: Allow
            Principal:
              AWS: !GetAtt DKIMManagerRole.Arn
            Action:
              - s3:ListBucket
              - s3:GetBucketVersioning
            Resource: !GetAtt DKIMCertificatesBucket.Arn

          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !GetAtt DKIMCertificatesBucket.Arn
              - !Sub "${DKIMCertificatesBucket.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "false"

  # Bucket policy for logs bucket
  DKIMLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: DKIMManagerRole
    Properties:
      Bucket: !Ref DKIMLogsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowDKIMManagerLogAccess
            Effect: Allow
            Principal:
              AWS: !GetAtt DKIMManagerRole.Arn
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:ListBucket
            Resource:
              - !GetAtt DKIMLogsBucket.Arn
              - !Sub "${DKIMLogsBucket.Arn}/*"

          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !GetAtt DKIMLogsBucket.Arn
              - !Sub "${DKIMLogsBucket.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "false"

  # Bucket policy for Lambda layers bucket
  LambdaLayersBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: DKIMManagerRole
    Properties:
      Bucket: !Ref LambdaLayersBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowDKIMManagerLayerAccess
            Effect: Allow
            Principal:
              AWS: !GetAtt DKIMManagerRole.Arn
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:ListBucket
            Resource:
              - !GetAtt LambdaLayersBucket.Arn
              - !Sub "${LambdaLayersBucket.Arn}/*"

          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !GetAtt LambdaLayersBucket.Arn
              - !Sub "${LambdaLayersBucket.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "false"

  # ===================
  # Lambda Layer Setup
  # ===================

  # Lambda function to create and upload cryptography layer
  LayerSetupFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-${Environment}-layer-setup"
      Runtime: !Ref LambdaRuntime
      Handler: index.lambda_handler
      Role: !GetAtt LayerSetupRole.Arn
      Timeout: 300
      MemorySize: 512
      Code:
        ZipFile: |
          import json
          import boto3
          import subprocess
          import os
          import tempfile
          import zipfile
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              try:
                  s3_client = boto3.client('s3')
                  bucket_name = os.environ['LAYER_BUCKET_NAME']

                  # Create temporary directory
                  with tempfile.TemporaryDirectory() as temp_dir:
                      python_dir = os.path.join(temp_dir, 'python')
                      os.makedirs(python_dir, exist_ok=True)

                      # Install cryptography library
                      logger.info("Installing cryptography library...")
                      subprocess.run([
                          'pip', 'install', 'cryptography', '-t', python_dir
                      ], check=True, capture_output=True, text=True)

                      # Create ZIP file
                      zip_path = os.path.join(temp_dir, 'cryptography-layer.zip')
                      with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                          for root, dirs, files in os.walk(python_dir):
                              for file in files:
                                  file_path = os.path.join(root, file)
                                  arc_path = os.path.relpath(file_path, python_dir)
                                  zipf.write(file_path, arc_path)

                      # Upload to S3
                      logger.info(f"Uploading to S3 bucket: {bucket_name}")
                      s3_client.upload_file(zip_path, bucket_name, 'cryptography-layer.zip')

                      logger.info("Cryptography layer setup completed successfully")

                      return {
                          'statusCode': 200,
                          'body': json.dumps({
                              'message': 'Cryptography layer created and uploaded successfully',
                              'bucket': bucket_name,
                              'key': 'cryptography-layer.zip'
                          })
                      }

              except Exception as e:
                  logger.error(f"Error: {str(e)}")
                  raise

      Environment:
        Variables:
          LAYER_BUCKET_NAME: !Ref LambdaLayersBucket

      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-layer-setup"
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: "Lambda layer setup"

  # IAM role for layer setup function
  LayerSetupRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-${Environment}-layer-setup-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LayerSetupPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: !Sub "${LambdaLayersBucket.Arn}/*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !GetAtt LambdaLayersBucket.Arn

  # EventBridge rule to trigger layer setup
  LayerSetupRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${ProjectName}-${Environment}-layer-setup-rule"
      Description: "Trigger layer setup after stack creation"
      State: ENABLED
      EventPattern:
        source: ["aws.cloudformation"]
        detail-type: ["CloudFormation Stack Status Change"]
        detail:
          status-details:
            status: ["CREATE_COMPLETE", "UPDATE_COMPLETE"]
          stack-id: [!Ref "AWS::StackId"]
      Targets:
        - Arn: !GetAtt LayerSetupFunction.Arn
          Id: "LayerSetupTarget"

  # Permission for EventBridge to invoke layer setup function
  LayerSetupPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LayerSetupFunction.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LayerSetupRule.Arn

  # ===================
  # CloudWatch Logs
  # ===================

  # Log Group for Layer Setup Lambda
  LayerSetupLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ProjectName}-${Environment}-layer-setup"
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-layer-setup-logs"
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: "Layer Setup Lambda logs"

  # Log Group for DKIM Manager Lambda
  DKIMManagerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ProjectName}-${Environment}-dkim-manager"
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-dkim-manager-logs"
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: "DKIM Manager Lambda logs"

  # Log Group for DNS Notifier Lambda
  DNSNotifierLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ProjectName}-${Environment}-dns-notifier"
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-dns-notifier-logs"
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: "DNS Notifier Lambda logs"

  # Log Group for Certificate Monitor Lambda
  CertificateMonitorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ProjectName}-${Environment}-certificate-monitor"
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-certificate-monitor-logs"
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: "Certificate Monitor Lambda logs"

  # Log Group for system events
  SystemEventsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/events/${ProjectName}-${Environment}-system-events"
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-system-events-logs"
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: "System events logs"

  # Log Group for API Gateway (if used)
  APIGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/${ProjectName}-${Environment}"
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-apigateway-logs"
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: "API Gateway logs"

  # CloudWatch Log Group for S3 notifications
  DKIMCertificatesLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/s3/${ProjectName}-${Environment}-dkim-certificates"
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-s3-certificates-logs"
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Metric Filter for Error Detection
  ErrorMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref DKIMManagerLogGroup
      FilterPattern: "ERROR"
      MetricTransformations:
        - MetricNamespace: !Sub "${ProjectName}/${Environment}/Lambda"
          MetricName: "ErrorCount"
          MetricValue: "1"
          DefaultValue: 0

  # Metric Filter for DKIM Success
  DKIMSuccessMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref DKIMManagerLogGroup
      FilterPattern: "DKIM_SUCCESS"
      MetricTransformations:
        - MetricNamespace: !Sub "${ProjectName}/${Environment}/DKIM"
          MetricName: "SuccessCount"
          MetricValue: "1"
          DefaultValue: 0

  # Metric Filter for DNS Notification
  DNSNotificationMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref DNSNotifierLogGroup
      FilterPattern: "DNS_NOTIFICATION_SENT"
      MetricTransformations:
        - MetricNamespace: !Sub "${ProjectName}/${Environment}/DNS"
          MetricName: "NotificationCount"
          MetricValue: "1"
          DefaultValue: 0

Outputs:
  # IAM Outputs
  DKIMManagerRoleArn:
    Description: ARN of the DKIM Manager Lambda execution role
    Value: !GetAtt DKIMManagerRole.Arn
    Export:
      Name: !Sub "${ProjectName}-${Environment}-dkim-manager-role-arn"

  CloudFormationRoleArn:
    Description: ARN of the CloudFormation execution role
    Value: !GetAtt CloudFormationRole.Arn
    Export:
      Name: !Sub "${ProjectName}-${Environment}-cloudformation-role-arn"

  # KMS Outputs
  DKIMEncryptionKeyId:
    Description: ID of the DKIM encryption key
    Value: !Ref DKIMEncryptionKey
    Export:
      Name: !Sub "${ProjectName}-${Environment}-dkim-encryption-key-id"

  DKIMEncryptionKeyArn:
    Description: ARN of the DKIM encryption key
    Value: !GetAtt DKIMEncryptionKey.Arn
    Export:
      Name: !Sub "${ProjectName}-${Environment}-dkim-encryption-key-arn"

  DKIMEncryptionKeyAlias:
    Description: Alias of the DKIM encryption key
    Value: !Ref DKIMEncryptionKeyAlias
    Export:
      Name: !Sub "${ProjectName}-${Environment}-dkim-encryption-key-alias"

  # Secrets Manager Outputs
  DKIMConfigSecretArn:
    Description: ARN of the DKIM configuration secret
    Value: !Ref DKIMConfigSecret
    Export:
      Name: !Sub "${ProjectName}-${Environment}-dkim-config-secret-arn"

  DKIMConfigSecretName:
    Description: Name of the DKIM configuration secret
    Value: !Ref DKIMConfigSecret
    Export:
      Name: !Sub "${ProjectName}-${Environment}-dkim-config-secret-name"

  SMTPAuthSecretArn:
    Description: ARN of the SMTP authentication secret
    Value: !Ref SMTPAuthSecret
    Export:
      Name: !Sub "${ProjectName}-${Environment}-smtp-auth-secret-arn"

  SMTPAuthSecretName:
    Description: Name of the SMTP authentication secret
    Value: !Ref SMTPAuthSecret
    Export:
      Name: !Sub "${ProjectName}-${Environment}-smtp-auth-secret-name"

  # S3 Outputs
  DKIMCertificatesBucketName:
    Description: Name of the DKIM certificates S3 bucket
    Value: !Ref DKIMCertificatesBucket
    Export:
      Name: !Sub "${ProjectName}-${Environment}-dkim-certificates-bucket-name"

  DKIMCertificatesBucketArn:
    Description: ARN of the DKIM certificates S3 bucket
    Value: !GetAtt DKIMCertificatesBucket.Arn
    Export:
      Name: !Sub "${ProjectName}-${Environment}-dkim-certificates-bucket-arn"

  DKIMLogsBucketName:
    Description: Name of the DKIM logs S3 bucket
    Value: !Ref DKIMLogsBucket
    Export:
      Name: !Sub "${ProjectName}-${Environment}-dkim-logs-bucket-name"

  DKIMLogsBucketArn:
    Description: ARN of the DKIM logs S3 bucket
    Value: !GetAtt DKIMLogsBucket.Arn
    Export:
      Name: !Sub "${ProjectName}-${Environment}-dkim-logs-bucket-arn"

  LambdaLayersBucketName:
    Description: Name of the Lambda layers S3 bucket
    Value: !Ref LambdaLayersBucket
    Export:
      Name: !Sub "${ProjectName}-${Environment}-lambda-layers-v2-bucket-name"

  LambdaLayersBucketArn:
    Description: ARN of the Lambda layers S3 bucket
    Value: !GetAtt LambdaLayersBucket.Arn
    Export:
      Name: !Sub "${ProjectName}-${Environment}-lambda-layers-v2-bucket-arn"

  # CloudWatch Logs Outputs
  DKIMManagerLogGroupName:
    Description: Name of the DKIM Manager log group
    Value: !Ref DKIMManagerLogGroup
    Export:
      Name: !Sub "${ProjectName}-${Environment}-dkim-manager-log-group-name"

  DKIMManagerLogGroupArn:
    Description: ARN of the DKIM Manager log group
    Value: !GetAtt DKIMManagerLogGroup.Arn
    Export:
      Name: !Sub "${ProjectName}-${Environment}-dkim-manager-log-group-arn"

  DNSNotifierLogGroupName:
    Description: Name of the DNS Notifier log group
    Value: !Ref DNSNotifierLogGroup
    Export:
      Name: !Sub "${ProjectName}-${Environment}-dns-notifier-log-group-name"

  CertificateMonitorLogGroupName:
    Description: Name of the Certificate Monitor log group
    Value: !Ref CertificateMonitorLogGroup
    Export:
      Name: !Sub "${ProjectName}-${Environment}-certificate-monitor-log-group-name"

  SystemEventsLogGroupName:
    Description: Name of the System Events log group
    Value: !Ref SystemEventsLogGroup
    Export:
      Name: !Sub "${ProjectName}-${Environment}-system-events-log-group-name"

  # DNS Team Configuration Outputs
  DNSTeamEmail:
    Description: Email address for DNS management team
    Value: !Ref DNSTeamEmail
    Export:
      Name: !Sub "${ProjectName}-${Environment}-dns-team-email"

  # Common Configuration Outputs
  ProjectName:
    Description: Project name
    Value: !Ref ProjectName
    Export:
      Name: !Sub "${ProjectName}-${Environment}-project-name"

  Environment:
    Description: Environment name
    Value: !Ref Environment
    Export:
      Name: !Sub "${ProjectName}-${Environment}-environment"

  DomainName:
    Description: Domain name for DKIM
    Value: !Ref DomainName
    Export:
      Name: !Sub "${ProjectName}-${Environment}-domain-name"
