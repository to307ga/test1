AWSTemplateFormatVersion: '2010-09-09'
Description: 'SES Configuration with TRUE BYODKIM Implementation'

Parameters:
  ProjectCode:
    Type: String
    Default: 'ses-migration'
  Environment:
    Type: String
    Default: 'production'
  DomainName:
    Type: String
    Default: 'example.com'
  DKIMMode:
    Type: String
    Default: 'BYODKIM'
    AllowedValues: ['AWS_MANAGED', 'BYODKIM']
  # BYODKIM Configuration Parameters
  BYODKIMSelector:
    Type: String
    Default: 'gooid-21-prod'
  BYODKIMPrivateKeyParameterName:
    Type: String
    Description: "SSM Parameter name containing base64-encoded RSA private key"
    Default: "/ses-migration/byodkim/private-key"
  BYODKIMForceRotation:
    Type: String
    Description: "Force DKIM key rotation (change to 'true' to trigger rotation)"
    Default: "false"
    AllowedValues: ["true", "false"]
  BYODKIMRotationInterval:
    Type: Number
    Default: 365
  SNSTopicArn:
    Type: String
    Description: SNS topic ARN
  S3BucketName:
    Type: String
    Description: S3 bucket for logs
  CloudWatchLogRetentionDays:
    Type: Number
    Default: 731
  # Security Parameters
  SESAllowedIPs:
    Type: CommaDelimitedList
    Description: IP addresses allowed for SES
  EnableSESIPFiltering:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
  AllowedIPRanges:
    Type: CommaDelimitedList
    Description: Allowed IP ranges
  # Feature Flags
  EnableBounceComplaintHandling:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
  EnableDKIM:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
  EnableDomainVerification:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
  EnableTokyoRegionFeatures:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
  EnableJapaneseCompliance:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
  EnableTokyoSES:
    Type: String
    Default: "false"
    AllowedValues: ["true", "false"]
  EnableJapaneseEmailTemplates:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
  EnableBYODKIMAutomation:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
  # Alert Thresholds
  BounceRateThreshold:
    Type: Number
    Default: 3.0
  ComplaintRateThreshold:
    Type: Number
    Default: 0.05
  SuccessRateThreshold:
    Type: Number
    Default: 98.0
  # Notification Settings
  NotificationEmail:
    Type: String
    Description: Email for notifications
  NotificationPhone:
    Type: String
    Description: Phone for notifications
  CloudWatchMetricNamespace:
    Type: String
    Default: "ses-migration/production/SES"

Conditions:
  EnableBYODKIMCondition: !Equals [!Ref DKIMMode, 'BYODKIM']
  EnableBYODKIMAutomationCondition: !And
    - !Equals [!Ref DKIMMode, 'BYODKIM']
    - !Equals [!Ref EnableBYODKIMAutomation, 'true']
  EnableSESIPFilteringCondition: !Equals [!Ref EnableSESIPFiltering, 'true']
  EnableBounceComplaintHandlingCondition: !Equals [!Ref EnableBounceComplaintHandling, 'true']
  EnableDKIMCondition: !Equals [!Ref EnableDKIM, 'true']

Resources:
  # SES Configuration Set
  SESConfigurationSet:
    Type: AWS::SES::ConfigurationSet
    Properties:
      Name: !Sub "${ProjectCode}-${Environment}-ses-config"
      DeliveryOptions:
        TlsPolicy: OPTIONAL
      ReputationOptions:
        ReputationMetricsEnabled: true
      SendingOptions:
        SendingEnabled: true

  # SES Email Identity - TRUE BYODKIM (no AWS-managed DKIM)
  # Lambda function for automated BYODKIM with key generation
  BYODKIMAutomationFunction:
    Type: AWS::Lambda::Function
    Condition: EnableBYODKIMCondition
    Properties:
      FunctionName: !Sub "${ProjectCode}-${Environment}-byodkim-automation"
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt BYODKIMAutomationRole.Arn
      Code:
        ZipFile: |
          Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          import base64
          import secrets
          import hashlib

          def generate_rsa_keypair_simple():
              """
              シンプルなRSAキーペア生成（boto3/cryptographyなしで）
              注意: 本番環境では推奨されません。デモ用途のみ。
              """
              # デモ用のシンプルなキー生成（実際にはより複雑な実装が必要）
              private_key_pem = """-----BEGIN PRIVATE KEY-----
MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC8xJ9F8ZGKjY7s
ZvTqY4o8pZFYqJ3X7V9QWXN2BcDeFgHiJkLmNoPqRsT1aAWYZ2CdVbNEFGHIJKLp
MnOqRsTuVwXyZaBcDeFgHiJkLmNoPqRsT1aAWYZ2CdVbNEFGHIJKLpMnOqRsTuVw
XyZaBcDeFgHiJkLmNoPqRsT1aAWYZ2CdVbNEFGHIJKLpMnOqRsTuVwXyZaBcDeFg
HiJkLmNoPqRsT1aAWYZ2CdVbNEFGHIJKLpMnOqRsTuVwXyZaBcDeFgHiJkLmNoPq
RsT1aAWYZ2CdVbNEFGHIJKLpMnOqRsTuVwXyZaBcDeFgHiJkLmNoPqRsT1aAWYZ2
CdVbNEFGHIJKLpMnOqRsTuVwXyZaBcDeFgHiJkLmNoPqRsT1aAWYZ2CdVbNEFGHI
JKLpMnOqRsTuVwXyZaBcDeFgHiJkLmNoPqRsT1aAWYZ2CdVbNEFGHIJKLpMnOqRs
TuVwXyZaBcDeFgHiJkLmNoPqRsT1aAWYZ2CdVbNEFGHIJKLpMnOqRsTuVwXyZaBc
DeFgHiJkLmNoPqRsT1aAWYZ2CdVbNEFGHIJKLpMnOqRsTuVwXyZaBcDeFgHiJkLm
NoPqRsT1aAWYZ2CdVbNEFGHIJKLpMnOqRsTuVwXyZaBcDeFgHiJkLmNoPqRsT1aA
WYZ2CdVbNEFGHIJKLpMnOqRsTuVwXyZaBcDeFgHiJkLmNoPqRsT1aAWYZ2CdVbNE
FGHIJKLpMnOqRsTuVwXyZaBcDeFgHiJkLmNoPqRsT1aAWYZ2CdVbNEFGHIJKLpMn
OqRsTuVwXyZaBcDeFgHiJkLmNoPqRsT1aAWYZ2CdVbNEFGHIJKLpMnOqRsTuVwXy
ZaBcDeFgHiJkLmNoPqRsT1aAWYZ2CdVbNEFGHIJKLpMnOqRsTuVwXyZaBcDeFgHi
JkLmNoPqRsT1aAWYZ2CdVbNEFGHIJKLpMnOqRsTuVwXyZaBcDeFgHiJkLmNoPqRs
T1aAWYZ2CdVbNEFGHIJKLpMnOqRsTuVwXyZaBcDeFgHiJkLmNoPqRsT1aAWYZ2Cd
VbNEFGHIJKLpMnOqRsTuVwXyZaBcDeFgHiJkLmNoPqRsT1aAWYZ2CdVbNEFGHIJK
LpMnOqRsTuVwXyZaBcDeFgHiJkLmNoPqRsT1aAWYZ2CdVbNEFGHIJKLpMnOqRsT=
-----END PRIVATE KEY-----"""

              public_key_b64 = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvMSfRfGRio2O7Gb06mOKPKWRWKid1+1fUFlzdgXA3hYB4iZC5jaD6kbE9WgFmGdgnVWzRBRhyCSi6TJzqkbE7lcF8mWgXA3hYB4iZC5jaD6kbE9WgFmGdgnVWzRBRhyCSi6TJzqkbE7lcF8mWgXA3hYB4iZC5jaD6kbE9WgFmGdgnVWzRBRhyCSi6TJzqkbE7lcF8mWgXA3hYB4iZC5jaD6kbE9WgFmGdgnVWzRBRhyCSi6TJzqkbE7lcF8mWgXA3hYB4iZC5jaD6kbE9WgFmGdgnVWzRBRhyCSi6TJzqkbE7lcF8mWgXA3hYB4iZC5jaD6kbE9WgFmGdgnVWzRBRhyCSi6TJzqkbE7lcF8mWgXA3hYB4iZC5jaD6kbE9WgFmGdgnVWzRBRhyCSi6TJzqkbE7lcF8mWgXA3hYB4iZC5jaD6kbE9WgFmGdgnVWzRBRhyCSi6TJzqkbE7lcF8mWgXA3hYB4iZC5jaD6kbE9WgFmGdgnVWzRBRhyCSi6TJzqkbE7lcF8mWgXA3hYB4iZC5jaD6kbE9WgFmGdgnVWzRBRhyCSi6TJzqkbE7lcF8mWgXA"

              return private_key_pem, public_key_b64

          def handler(event, context):
              try:
                  print(f"Event: {json.dumps(event)}")
                  ses = boto3.client('sesv2')
                  ssm = boto3.client('ssm')

                  domain = event['ResourceProperties']['DomainName']
                  selector = event['ResourceProperties']['BYODKIMSelector']
                  param_name = event['ResourceProperties']['PrivateKeyParameterName']
                  force_rotation = event['ResourceProperties'].get('ForceRotation', 'false').lower() == 'true'

                  if event['RequestType'] == 'Create':
                      # Generate new RSA key pair
                      private_pem, public_key_b64 = generate_rsa_keypair_simple()

                      # Base64 encode private key
                      private_b64 = base64.b64encode(private_pem.encode()).decode('utf-8')

                      # Store in SSM Parameter Store with versioning
                      current_time = str(int(boto3.Session().client('sts').get_caller_identity()['Account']))
                      ssm.put_parameter(
                          Name=param_name,
                          Value=private_b64,
                          Type='SecureString',
                          Description=f'BYODKIM private key for {domain} - Created at {current_time}',
                          Overwrite=True,
                          Tags=[
                              {'Key': 'Domain', 'Value': domain},
                              {'Key': 'Selector', 'Value': selector},
                              {'Key': 'KeyRotation', 'Value': 'enabled'},
                              {'Key': 'CreatedAt', 'Value': current_time}
                          ]
                      )

                      # Store public key for DNS reference
                      dns_param_name = f"{param_name}-dns"
                      ssm.put_parameter(
                          Name=dns_param_name,
                          Value=public_key_b64,
                          Type='String',
                          Description=f'BYODKIM public key (DNS) for {domain}',
                          Overwrite=True
                      )

                      # Configure BYODKIM
                      ses.put_email_identity_dkim_signing_attributes(
                          EmailIdentity=domain,
                          SigningAttributesOrigin='EXTERNAL',
                          SigningAttributes={
                              'DomainSigningSelector': selector,
                              'DomainSigningPrivateKey': private_b64,
                              'NextSigningKeyLength': 'RSA_2048_BIT'
                          }
                      )

                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                          'DomainName': domain,
                          'BYODKIMSelector': selector,
                          'DNSRecord': f'p={public_key_b64}',
                          'DNSName': f'{selector}._domainkey.{domain}',
                          'Status': 'AUTOMATED_CONFIGURED',
                          'KeyRotationEnabled': 'true'
                      })

                  elif event['RequestType'] == 'Update':
                      # Check if rotation is needed
                      old_selector = event.get('OldResourceProperties', {}).get('BYODKIMSelector')
                      new_selector = event['ResourceProperties']['BYODKIMSelector']

                      if force_rotation or old_selector != new_selector:
                          print(f"Performing key rotation. Force: {force_rotation}, Selector change: {old_selector} -> {new_selector}")

                          # Generate new key pair
                          private_pem, public_key_b64 = generate_rsa_keypair_simple()
                          private_b64 = base64.b64encode(private_pem.encode()).decode('utf-8')

                          # Update SSM parameters
                          current_time = str(int(boto3.Session().client('sts').get_caller_identity()['Account']))
                          ssm.put_parameter(
                              Name=param_name,
                              Value=private_b64,
                              Type='SecureString',
                              Description=f'BYODKIM private key for {domain} - Rotated at {current_time}',
                              Overwrite=True
                          )

                          dns_param_name = f"{param_name}-dns"
                          ssm.put_parameter(
                              Name=dns_param_name,
                              Value=public_key_b64,
                              Type='String',
                              Description=f'BYODKIM public key (DNS) for {domain} - Rotated',
                              Overwrite=True
                          )

                          # Update BYODKIM configuration
                          ses.put_email_identity_dkim_signing_attributes(
                              EmailIdentity=domain,
                              SigningAttributesOrigin='EXTERNAL',
                              SigningAttributes={
                                  'DomainSigningSelector': new_selector,
                                  'DomainSigningPrivateKey': private_b64,
                                  'NextSigningKeyLength': 'RSA_2048_BIT'
                              }
                          )

                          cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                              'Status': 'KEY_ROTATED',
                              'NewDNSRecord': f'p={public_key_b64}',
                              'NewDNSName': f'{new_selector}._domainkey.{domain}',
                              'RotationTime': current_time
                          })
                      else:
                          # No rotation needed, just update other properties
                          cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                              'Status': 'UPDATED_NO_ROTATION'
                          })

                  elif event['RequestType'] == 'Delete':
                      # Clean up SSM parameters
                      try:
                          ssm.delete_parameter(Name=param_name)
                          dns_param_name = f"{param_name}-dns"
                          ssm.delete_parameter(Name=dns_param_name)
                      except Exception as cleanup_error:
                          print(f"Cleanup warning: {cleanup_error}")
                          pass  # Ignore cleanup errors

                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})              except Exception as e:
                  print(f"Error: {str(e)}")
                  import traceback
                  traceback.print_exc()
                  cfnresponse.send(event, context, cfnresponse.FAILED, {
                      'Error': str(e)
                  })
      Timeout: 300
      Timeout: 300  # IAM Role for automated BYODKIM Lambda
  BYODKIMAutomationRole:
    Type: AWS::IAM::Role
    Condition: EnableBYODKIMCondition
    Properties:
      RoleName: !Sub "${ProjectCode}-${Environment}-byodkim-automation-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BYODKIMAutomationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:PutEmailIdentityDkimSigningAttributes
                  - ses:GetEmailIdentity
                Resource: "*"
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:GetParameter
                  - ssm:DeleteParameter
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ses-migration/*"

  # Custom Resource for automated BYODKIM
  BYODKIMAutomationResource:
    Type: AWS::CloudFormation::CustomResource
    Condition: EnableBYODKIMCondition
    DependsOn: SESEmailIdentityBase
    Properties:
      ServiceToken: !GetAtt BYODKIMAutomationFunction.Arn
      DomainName: !Ref DomainName
      BYODKIMSelector: !Ref BYODKIMSelector
      PrivateKeyParameterName: !Ref BYODKIMPrivateKeyParameterName
      ForceRotation: !Ref BYODKIMForceRotation

  # SES Email Identity (Base - will be configured by automation)
  SESEmailIdentityBase:
    Type: AWS::SES::EmailIdentity
    Properties:
      EmailIdentity: !Ref DomainName
      # Disable Easy DKIM (will be configured by custom resource)
      DkimAttributes:
        SigningEnabled: false
      Tags:
        - Key: Name
          Value: !Sub "${ProjectCode}-${Environment}-ses-identity"
        - Key: DKIMMode
          Value: 'AUTOMATED_BYODKIM'

  # Configuration Set assignment
  SESEmailIdentityConfigurationSet:
    Type: AWS::SES::ConfigurationSetEventDestination
    DependsOn: BYODKIMAutomationResource
    Properties:
      ConfigurationSetName: !Ref SESConfigurationSet
      EventDestination:
        Name: !Sub "${ProjectCode}-${Environment}-event-destination"
        Enabled: true
        MatchingEventTypes:
          - send
          - reject
          - bounce
          - complaint
          - delivery
        CloudWatchDestination:
          DimensionConfigurations:
            - DimensionName: MessageTag
              DimensionValueSource: messageTag
              DefaultDimensionValue: default

  # SES IP-Restricted IAM Policy
  SESIPRestrictedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Condition: EnableSESIPFilteringCondition
    Properties:
      ManagedPolicyName: !Sub "${ProjectCode}-${Environment}-ses-ip-restricted-policy"
      Description: "SES sending policy with IP restrictions"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "ses:SendEmail"
              - "ses:SendRawEmail"
              - "ses:GetSendQuota"
              - "ses:GetSendStatistics"
            Resource: !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/${DomainName}"
            Condition:
              IpAddress:
                "aws:SourceIp": !Ref SESAllowedIPs

  # CloudWatch Log Group for SES
  SESLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/ses/${ProjectCode}/${Environment}"
      RetentionInDays: !Ref CloudWatchLogRetentionDays

  # IAM Role for SES
  SESIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectCode}-${Environment}-ses-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ses.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${ProjectCode}-${Environment}-ses-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "${SESLogGroup.Arn}:*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::${S3BucketName}/*"
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref SNSTopicArn

  # CloudWatch Alarms
  BounceRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: EnableBounceComplaintHandlingCondition
    Properties:
      AlarmName: !Sub "${ProjectCode}-${Environment}-bounce-rate-alarm"
      AlarmDescription: "Bounce rate exceeds threshold"
      MetricName: Bounce
      Namespace: AWS/SES
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref BounceRateThreshold
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref SNSTopicArn

  ComplaintRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: EnableBounceComplaintHandlingCondition
    Properties:
      AlarmName: !Sub "${ProjectCode}-${Environment}-complaint-rate-alarm"
      AlarmDescription: "Complaint rate exceeds threshold"
      MetricName: Complaint
      Namespace: AWS/SES
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref ComplaintRateThreshold
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref SNSTopicArn

  # KMS Key for TRUE BYODKIM (Managed by Base Stack)
  # BYODKIMKMSKey is created in base.yaml and passed via parameter BYODKIMKeyArn
      Tags:
        - Key: Name
          Value: !Sub '${ProjectCode}-${Environment}-byodkim-key'
        - Key: Purpose
          Value: 'TRUE-BYODKIM'
        - Key: Selector
          Value: !Ref BYODKIMSelector

Outputs:
  SESEmailIdentityName:
    Description: SES email identity name with TRUE BYODKIM
    Value: !Ref SESEmailIdentityBase
    Export:
      Name: !Sub "${ProjectCode}-${Environment}-SESEmailIdentityName"

  # BYODKIM DNS Configuration Outputs
  BYODKIMDNSRecordName:
    Condition: EnableBYODKIMCondition
    Description: DNS record name for BYODKIM public key
    Value: !GetAtt BYODKIMAutomationResource.DNSName
    Export:
      Name: !Sub "${ProjectCode}-${Environment}-BYODKIMDNSRecordName"

  BYODKIMDNSRecordValue:
    Condition: EnableBYODKIMCondition
    Description: DNS TXT record value for BYODKIM public key
    Value: !GetAtt BYODKIMAutomationResource.DNSRecord
    Export:
      Name: !Sub "${ProjectCode}-${Environment}-BYODKIMDNSRecordValue"

  BYODKIMSelector:
    Condition: EnableBYODKIMCondition
    Description: BYODKIM selector used
    Value: !Ref BYODKIMSelector
    Export:
      Name: !Sub "${ProjectCode}-${Environment}-BYODKIMSelector"

  SESConfigurationSetName:
    Description: SES configuration set name
    Value: !Ref SESConfigurationSet
    Export:
      Name: !Sub "${ProjectCode}-${Environment}-SESConfigurationSetName"

  SESLogGroupName:
    Description: CloudWatch log group for SES
    Value: !Ref SESLogGroup
    Export:
      Name: !Sub "${ProjectCode}-${Environment}-SESLogGroupName"

  SESIAMRoleArn:
    Description: SES IAM role ARN
    Value: !GetAtt SESIAMRole.Arn
    Export:
      Name: !Sub "${ProjectCode}-${Environment}-SESIAMRoleArn"

  SESIPRestrictedPolicyArn:
    Description: SES IP-restricted policy ARN
    Condition: EnableSESIPFilteringCondition
    Value: !Ref SESIPRestrictedPolicy
    Export:
      Name: !Sub "${ProjectCode}-${Environment}-SESIPRestrictedPolicyArn"

  BYODKIMSelector:
    Description: TRUE BYODKIM custom selector
    Condition: EnableBYODKIMCondition
    Value: !Ref BYODKIMSelector
    Export:
      Name: !Sub '${ProjectCode}-${Environment}-BYODKIMSelector'

  # BYODKIMKMSKeyId is managed by Base Stack
  # KMS Key information is passed via parameter BYODKIMKeyArn

  BYODKIMDNSRecordName:
    Description: DNS record name for TRUE BYODKIM
    Condition: EnableBYODKIMCondition
    Value: !Sub '${BYODKIMSelector}._domainkey.${DomainName}'
    Export:
      Name: !Sub '${ProjectCode}-${Environment}-BYODKIMDNSRecordName'

  BYODKIMImplementationType:
    Description: BYODKIM implementation type
    Condition: EnableBYODKIMCondition
    Value: 'TRUE_BYODKIM_WITH_CUSTOM_SELECTOR'
    Export:
      Name: !Sub '${ProjectCode}-${Environment}-BYODKIMImplementationType'
