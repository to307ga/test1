AWSTemplateFormatVersion: '2010-09-09'
Description: 'BYODKIM Key Generation and SSM Storage - Lambda Automation'

Parameters:
  ProjectCode:
    Type: String
    Default: 'ses-migration'
    Description: 'Project identifier for resource naming'
  Environment:
    Type: String
    Default: 'production'
    Description: 'Environment (production, staging, development)'
  BYODKIMSelector:
    Type: String
    Default: 'gooid-21-prod'
    Description: 'BYODKIM selector for DNS TXT record'

Resources:
  # Lambda Execution Role
  BYODKIMKeyGenRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SSMParameterPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:GetParameter
                  - ssm:DeleteParameter
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ses/byodkim/*'

  # Lambda Function for RSA Key Generation Only
  BYODKIMKeyGenFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectCode}-${Environment}-byodkim-keygen'
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt BYODKIMKeyGenRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import json
          import boto3
          import base64
          import cfnresponse
          import subprocess
          import tempfile
          import os

          def lambda_handler(event, context):
              try:
                  print(f"Event: {json.dumps(event)}")

                  ssm = boto3.client('ssm')
                  selector = event['ResourceProperties']['BYODKIMSelector']

                  if event['RequestType'] == 'Delete':
                      try:
                          # Delete SSM parameters
                          ssm.delete_parameter(Name='/ses/byodkim/private-key-base64')
                          ssm.delete_parameter(Name='/ses/byodkim/public-key-dns')
                          print("Deleted SSM parameters")
                      except Exception as e:
                          print(f"Error deleting SSM parameters: {e}")
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      return

                  if event['RequestType'] in ['Create', 'Update']:
                      print("Generating RSA key pair using OpenSSL")

                      # Use OpenSSL subprocess
                      with tempfile.TemporaryDirectory() as tmpdir:
                          private_key_path = os.path.join(tmpdir, 'private.pem')

                          # Generate private key using OpenSSL
                          result = subprocess.run([
                              'openssl', 'genrsa', '2048'
                          ], check=True, capture_output=True, text=True)
                          private_pem = result.stdout.encode('utf-8')

                          # Save private key to temp file
                          with open(private_key_path, 'wb') as f:
                              f.write(private_pem)

                          # Extract public key in DER format for DNS
                          result = subprocess.run([
                              'openssl', 'rsa', '-in', private_key_path,
                              '-pubout', '-outform', 'DER'
                          ], check=True, capture_output=True)
                          public_der = result.stdout

                      # Base64 encode keys
                      private_key_base64 = base64.b64encode(private_pem).decode('utf-8')
                      public_key_dns = base64.b64encode(public_der).decode('utf-8')

                      print(f"Generated keys - Private: {len(private_key_base64)} chars, Public: {len(public_key_dns)} chars")

                      # Store in SSM Parameter Store
                      ssm.put_parameter(
                          Name='/ses/byodkim/private-key-base64',
                          Value=private_key_base64,
                          Type='SecureString',
                          Description=f'BYODKIM private key for {selector} (base64 encoded)',
                          Overwrite=True
                      )

                      ssm.put_parameter(
                          Name='/ses/byodkim/public-key-dns',
                          Value=public_key_dns,
                          Type='String',
                          Description=f'BYODKIM public key for {selector} DNS TXT record',
                          Overwrite=True
                      )

                      print("Keys stored in SSM Parameter Store successfully")

                      response_data = {
                          'BYODKIMSelector': selector,
                          'PublicKeyDNS': public_key_dns,
                          'DNSRecordValue': f'v=DKIM1; k=rsa; p={public_key_dns}',
                          'PrivateKeySSMPath': '/ses/byodkim/private-key-base64',
                          'PublicKeySSMPath': '/ses/byodkim/public-key-dns',
                          'Status': 'Keys generated and stored in SSM'
                      }

                      cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)

              except Exception as e:
                  print(f"Error: {str(e)}")
                  import traceback
                  traceback.print_exc()
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})

  # Custom Resource for Key Generation
  BYODKIMKeyGenResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt BYODKIMKeyGenFunction.Arn
      BYODKIMSelector: !Ref BYODKIMSelector

Outputs:
  BYODKIMSelector:
    Description: 'BYODKIM selector for DNS configuration'
    Value: !GetAtt BYODKIMKeyGenResource.BYODKIMSelector
    Export:
      Name: !Sub '${ProjectCode}-${Environment}-BYODKIM-KeyGen-Selector'

  PublicKeyDNS:
    Description: 'Public key for DNS TXT record'
    Value: !GetAtt BYODKIMKeyGenResource.PublicKeyDNS
    Export:
      Name: !Sub '${ProjectCode}-${Environment}-BYODKIM-KeyGen-PublicKey'

  DNSRecordValue:
    Description: 'Complete DNS TXT record value'
    Value: !GetAtt BYODKIMKeyGenResource.DNSRecordValue
    Export:
      Name: !Sub '${ProjectCode}-${Environment}-BYODKIM-KeyGen-DNSValue'

  PrivateKeyLocation:
    Description: 'SSM Parameter Store path for private key'
    Value: !GetAtt BYODKIMKeyGenResource.PrivateKeySSMPath
    Export:
      Name: !Sub '${ProjectCode}-${Environment}-BYODKIM-KeyGen-PrivateKeySSM'

  PublicKeyLocation:
    Description: 'SSM Parameter Store path for public key'
    Value: !GetAtt BYODKIMKeyGenResource.PublicKeySSMPath
    Export:
      Name: !Sub '${ProjectCode}-${Environment}-BYODKIM-KeyGen-PublicKeySSM'

  KeyGenerationStatus:
    Description: 'Key generation and storage status'
    Value: !GetAtt BYODKIMKeyGenResource.Status
    Export:
      Name: !Sub '${ProjectCode}-${Environment}-BYODKIM-KeyGen-Status'
