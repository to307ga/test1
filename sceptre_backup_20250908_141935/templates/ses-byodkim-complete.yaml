AWSTemplateFormatVersion: '2010-09-09'
Description: 'SES Email Identity with BYODKIM - Complete Lambda Automation'

Parameters:
  ProjectCode:
    Type: String
    Default: 'ses-migration'
    Description: 'Project identifier for resource naming'
  Environment:
    Type: String
    Default: 'production'
    Description: 'Environment (production, staging, development)'
  DomainName:
    Type: String
    Default: 'goo.ne.jp'
    Description: 'Domain name for SES email identity'
  BYODKIMSelector:
    Type: String
    Default: 'gooid-21-prod'
    Description: 'BYODKIM selector for DNS TXT record'

Resources:
  # IAM Role for Lambda Key Generation and SES Management
  BYODKIMAutomationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BYODKIMAutomationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:GetParameter
                  - ssm:DeleteParameter
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ses/byodkim/*'
              - Effect: Allow
                Action:
                  - ses:CreateEmailIdentity
                  - ses:DeleteEmailIdentity
                  - ses:PutEmailIdentityDkimSigningAttributes
                  - ses:PutEmailIdentityDkimAttributes
                  - ses:TagResource
                Resource: '*'

  # Lambda Function for Complete BYODKIM Automation
  BYODKIMAutomationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectCode}-${Environment}-byodkim-automation'
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt BYODKIMAutomationRole.Arn
      Timeout: 300
      Code:
        ZipFile: |
          import json
          import boto3
          import base64
          import cfnresponse

          def lambda_handler(event, context):
              try:
                  ssm = boto3.client('ssm')
                  ses = boto3.client('sesv2')

                  domain_name = event['ResourceProperties']['DomainName']
                  selector = event['ResourceProperties']['BYODKIMSelector']
                  project_code = event['ResourceProperties']['ProjectCode']
                  environment = event['ResourceProperties']['Environment']

                  if event['RequestType'] == 'Delete':
                      try:
                          # Delete SES identity
                          ses.delete_email_identity(EmailIdentity=domain_name)
                          print(f"Deleted SES identity: {domain_name}")
                      except Exception as e:
                          print(f"Error deleting SES identity: {e}")
                      try:
                          # Delete SSM parameters
                          ssm.delete_parameter(Name='/ses/byodkim/private-key-base64')
                          ssm.delete_parameter(Name='/ses/byodkim/public-key-dns')
                          print("Deleted SSM parameters")
                      except Exception as e:
                          print(f"Error deleting SSM parameters: {e}")
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      return

                  if event['RequestType'] in ['Create', 'Update']:
                      # Import cryptography library (available in Lambda runtime)
                      try:
                          from cryptography.hazmat.primitives import serialization
                          from cryptography.hazmat.primitives.asymmetric import rsa
                          from cryptography.hazmat.backends import default_backend
                      except ImportError:
                          # Fallback: Use external OpenSSL process
                          import subprocess
                          import tempfile
                          import os

                          # Generate key using OpenSSL command
                          with tempfile.TemporaryDirectory() as tmpdir:
                              private_key_path = os.path.join(tmpdir, 'private.pem')
                              public_key_path = os.path.join(tmpdir, 'public.pem')

                              # Generate private key
                              subprocess.run(['openssl', 'genpkey', '-algorithm', 'RSA',
                                            '-out', private_key_path, '-pkcs8',
                                            '-pkeyopt', 'rsa_keygen_bits:2048'], check=True)

                              # Extract public key
                              subprocess.run(['openssl', 'rsa', '-in', private_key_path,
                                            '-pubout', '-out', public_key_path], check=True)

                              # Read keys
                              with open(private_key_path, 'rb') as f:
                                  private_pem = f.read()

                              # Get public key in DER format for DNS
                              result = subprocess.run(['openssl', 'rsa', '-in', private_key_path,
                                                     '-pubout', '-outform', 'DER'],
                                                     capture_output=True, check=True)
                              public_der = result.stdout
                      else:
                          # Use cryptography library
                          private_key = rsa.generate_private_key(
                              public_exponent=65537,
                              key_size=2048,
                              backend=default_backend()
                          )

                          private_pem = private_key.private_bytes(
                              encoding=serialization.Encoding.PEM,
                              format=serialization.PrivateFormat.PKCS8,
                              encryption_algorithm=serialization.NoEncryption()
                          )

                          public_key = private_key.public_key()
                          public_der = public_key.public_bytes(
                              encoding=serialization.Encoding.DER,
                              format=serialization.PublicFormat.SubjectPublicKeyInfo
                          )

                      # Base64 encode
                      private_key_base64 = base64.b64encode(private_pem).decode('utf-8')
                      public_key_dns = base64.b64encode(public_der).decode('utf-8')

                      # Store in SSM Parameter Store
                      ssm.put_parameter(
                          Name='/ses/byodkim/private-key-base64',
                          Value=private_key_base64,
                          Type='SecureString',
                          Description='BYODKIM private key (base64 encoded)',
                          Overwrite=True
                      )

                      ssm.put_parameter(
                          Name='/ses/byodkim/public-key-dns',
                          Value=public_key_dns,
                          Type='String',
                          Description='BYODKIM public key for DNS TXT record',
                          Overwrite=True
                      )

                      # Create SES Email Identity with BYODKIM
                      ses.create_email_identity(
                          EmailIdentity=domain_name,
                          DkimSigningAttributes={
                              'DomainSigningSelector': selector,
                              'DomainSigningPrivateKey': private_key_base64
                          },
                          Tags=[
                              {'Key': 'Project', 'Value': project_code},
                              {'Key': 'Environment', 'Value': environment},
                              {'Key': 'DKIMType', 'Value': 'BYODKIM-Automated'}
                          ]
                      )

                      # Enable DKIM signing
                      ses.put_email_identity_dkim_attributes(
                          EmailIdentity=domain_name,
                          SigningEnabled=True
                      )

                      response_data = {
                          'EmailIdentity': domain_name,
                          'PrivateKeySSMPath': '/ses/byodkim/private-key-base64',
                          'PublicKeyDNS': public_key_dns,
                          'DNSRecordValue': f'v=DKIM1; k=rsa; p={public_key_dns}',
                          'DNSRecordName': f'{selector}._domainkey.{domain_name}'
                      }

                      cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)

              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})

  # Custom Resource for Complete BYODKIM Setup
  BYODKIMAutomationResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt BYODKIMAutomationFunction.Arn
      BYODKIMSelector: !Ref BYODKIMSelector
      DomainName: !Ref DomainName
      ProjectCode: !Ref ProjectCode
      Environment: !Ref Environment

  # Configuration Set
  SESConfigurationSet:
    Type: AWS::SES::ConfigurationSet
    Properties:
      Name: !Sub '${ProjectCode}-${Environment}-byodkim-config'

Outputs:
  SESEmailIdentityName:
    Description: 'SES email identity name (created by Lambda)'
    Value: !GetAtt BYODKIMAutomationResource.EmailIdentity
    Export:
      Name: !Sub '${ProjectCode}-${Environment}-BYODKIM-Auto-SESEmailIdentityName'

  BYODKIMSelector:
    Description: 'BYODKIM selector for DNS configuration'
    Value: !Ref BYODKIMSelector
    Export:
      Name: !Sub '${ProjectCode}-${Environment}-BYODKIM-Auto-Selector'

  BYODKIMDNSRecordName:
    Description: 'DNS TXT record name for BYODKIM public key'
    Value: !GetAtt BYODKIMAutomationResource.DNSRecordName
    Export:
      Name: !Sub '${ProjectCode}-${Environment}-BYODKIM-Auto-DNSRecordName'

  BYODKIMDNSRecordValue:
    Description: 'DNS TXT record value for BYODKIM public key'
    Value: !GetAtt BYODKIMAutomationResource.DNSRecordValue
    Export:
      Name: !Sub '${ProjectCode}-${Environment}-BYODKIM-Auto-DNSRecordValue'

  SESConfigurationSetName:
    Description: 'SES configuration set name'
    Value: !Ref SESConfigurationSet
    Export:
      Name: !Sub '${ProjectCode}-${Environment}-BYODKIM-Auto-ConfigSet'

  SetupComplete:
    Description: 'BYODKIM setup status'
    Value: 'Complete - Add DNS TXT record to activate DKIM'
    Export:
      Name: !Sub '${ProjectCode}-${Environment}-BYODKIM-Auto-Status'
