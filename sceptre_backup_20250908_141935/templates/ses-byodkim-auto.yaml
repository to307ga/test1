AWSTemplateFormatVersion: '2010-09-09'
D              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:GetParameter
                  - ssm:DeleteParameter
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ses/byodkim/*'
              - Effect: Allow
                Action:
                  - ses:CreateEmailIdentity
                  - ses:DeleteEmailIdentity
                  - ses:PutEmailIdentityDkimSigningAttributes
                  - ses:PutEmailIdentityDkimAttributes
                  - ses:PutEmailIdentityFeedbackAttributes
                  - ses:TagResource
                Resource: '*'ion: 'SES Email Identity with BYODKIM - Automated Key Generation in Lambda'

Parameters:
  ProjectCode:
    Type: String
    Default: 'ses-migration'
    Description: 'Project identifier for resource naming'
  Environment:
    Type: String
    Default: 'production'
    Description: 'Environment (production, staging, development)'
  DomainName:
    Type: String
    Default: 'goo.ne.jp'
    Description: 'Domain name for SES email identity'
  BYODKIMSelector:
    Type: String
    Default: 'gooid-21-prod'
    Description: 'BYODKIM selector for DNS TXT record'

Resources:
  # IAM Role for Lambda Key Generation
  BYODKIMKeyGeneratorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:GetParameter
                  - ssm:DeleteParameter
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ses/byodkim/*'
      Tags:
        - Key: Project
          Value: !Ref ProjectCode
        - Key: Environment
          Value: !Ref Environment

  # Lambda Function for RSA Key Generation
  BYODKIMKeyGenerator:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectCode}-${Environment}-byodkim-keygen'
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt BYODKIMKeyGeneratorRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import json
          import boto3
          import base64
          import cfnresponse
          from cryptography.hazmat.primitives import serialization
          from cryptography.hazmat.primitives.asymmetric import rsa
          from cryptography.hazmat.backends import default_backend

          def lambda_handler(event, context):
              try:
                  ssm = boto3.client('ssm')

                  if event['RequestType'] == 'Delete':
                      try:
                          # Delete SSM parameters on stack deletion
                          ssm.delete_parameter(Name='/ses/byodkim/private-key-base64')
                          ssm.delete_parameter(Name='/ses/byodkim/public-key-dns')
                      except:
                          pass  # Parameters might not exist
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      return

                  if event['RequestType'] in ['Create', 'Update']:
                      # Generate RSA 2048-bit key pair
                      private_key = rsa.generate_private_key(
                          public_exponent=65537,
                          key_size=2048,
                          backend=default_backend()
                      )

                      # Serialize private key to PEM format
                      private_pem = private_key.private_bytes(
                          encoding=serialization.Encoding.PEM,
                          format=serialization.PrivateFormat.PKCS8,
                          encryption_algorithm=serialization.NoEncryption()
                      )

                      # Extract public key for DNS
                      public_key = private_key.public_key()
                      public_der = public_key.public_bytes(
                          encoding=serialization.Encoding.DER,
                          format=serialization.PublicFormat.SubjectPublicKeyInfo
                      )

                      # Base64 encode for CloudFormation and DNS
                      private_key_base64 = base64.b64encode(private_pem).decode('utf-8')
                      public_key_dns = base64.b64encode(public_der).decode('utf-8')

                      # Store in SSM Parameter Store
                      ssm.put_parameter(
                          Name='/ses/byodkim/private-key-base64',
                          Value=private_key_base64,
                          Type='SecureString',
                          Description='BYODKIM private key (base64 encoded)',
                          Overwrite=True
                      )

                      ssm.put_parameter(
                          Name='/ses/byodkim/public-key-dns',
                          Value=public_key_dns,
                          Type='String',
                          Description='BYODKIM public key for DNS TXT record',
                          Overwrite=True
                      )

                      response_data = {
                          'PrivateKeySSMPath': '/ses/byodkim/private-key-base64',
                          'PublicKeyDNS': public_key_dns,
                          'DNSRecordValue': f'v=DKIM1; k=rsa; p={public_key_dns}'
                      }

                      cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)

              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})
      Tags:
        - Key: Project
          Value: !Ref ProjectCode
        - Key: Environment
          Value: !Ref Environment

  # Custom Resource to Generate Keys and Create SES Identity
  BYODKIMKeyGeneratorResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt BYODKIMKeyGenerator.Arn
      BYODKIMSelector: !Ref BYODKIMSelector
      DomainName: !Ref DomainName
      ProjectCode: !Ref ProjectCode
      Environment: !Ref Environment

  # Configuration Set
  SESConfigurationSet:
    Type: AWS::SES::ConfigurationSet
    Properties:
      Name: !Sub '${ProjectCode}-${Environment}-byodkim-config'
      Tags:
        - Key: Project
          Value: !Ref ProjectCode
        - Key: Environment
          Value: !Ref Environment

Outputs:
  SESEmailIdentityName:
    Description: 'SES email identity name'
    Value: !GetAtt BYODKIMKeyGeneratorResource.EmailIdentity
    Export:
      Name: !Sub '${ProjectCode}-${Environment}-BYODKIM-Auto-SESEmailIdentityName'

  BYODKIMSelector:
    Description: 'BYODKIM selector for DNS configuration'
    Value: !Ref BYODKIMSelector
    Export:
      Name: !Sub '${ProjectCode}-${Environment}-BYODKIM-Auto-Selector'

  BYODKIMDNSRecordName:
    Description: 'DNS TXT record name for BYODKIM public key'
    Value: !GetAtt BYODKIMKeyGeneratorResource.DNSRecordName
    Export:
      Name: !Sub '${ProjectCode}-${Environment}-BYODKIM-Auto-DNSRecordName'

  BYODKIMDNSRecordValue:
    Description: 'DNS TXT record value for BYODKIM public key'
    Value: !GetAtt BYODKIMKeyGeneratorResource.DNSRecordValue
    Export:
      Name: !Sub '${ProjectCode}-${Environment}-BYODKIM-Auto-DNSRecordValue'

  PublicKeyRetrievalCommand:
    Description: 'Command to retrieve public key from SSM'
    Value: 'aws ssm get-parameter --name "/ses/byodkim/public-key-dns" --query "Parameter.Value" --output text'
    Export:
      Name: !Sub '${ProjectCode}-${Environment}-BYODKIM-Auto-PublicKeyCommand'
